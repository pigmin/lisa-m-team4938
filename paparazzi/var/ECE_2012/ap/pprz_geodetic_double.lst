   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"pprz_geodetic_double.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.global	__aeabi_dsub
  24              		.global	__aeabi_dmul
  25              		.global	__aeabi_dadd
  26              		.section	.text.enu_of_ecef_point_d,"ax",%progbits
  27              		.align	1
  28              		.global	enu_of_ecef_point_d
  29              		.thumb
  30              		.thumb_func
  32              	enu_of_ecef_point_d:
  33              	.LFB5:
  34              		.file 1 "math/pprz_geodetic_double.c"
   1:math/pprz_geodetic_double.c **** #include "pprz_geodetic_double.h"
   2:math/pprz_geodetic_double.c **** 
   3:math/pprz_geodetic_double.c **** #include <math.h>
   4:math/pprz_geodetic_double.c **** #include "std.h" /* for RadOfDeg */
   5:math/pprz_geodetic_double.c **** 
   6:math/pprz_geodetic_double.c **** 
   7:math/pprz_geodetic_double.c **** void ltp_def_from_ecef_d(struct LtpDef_d* def, struct EcefCoor_d* ecef) {
   8:math/pprz_geodetic_double.c **** 
   9:math/pprz_geodetic_double.c ****   /* store the origin of the tangeant plane       */
  10:math/pprz_geodetic_double.c ****   VECT3_COPY(def->ecef, *ecef);
  11:math/pprz_geodetic_double.c ****   /* compute the lla representation of the origin */
  12:math/pprz_geodetic_double.c ****   lla_of_ecef_d(&def->lla, &def->ecef);
  13:math/pprz_geodetic_double.c ****   /* store the rotation matrix                    */
  14:math/pprz_geodetic_double.c ****   const double sin_lat = sin(def->lla.lat);
  15:math/pprz_geodetic_double.c ****   const double cos_lat = cos(def->lla.lat);
  16:math/pprz_geodetic_double.c ****   const double sin_lon = sin(def->lla.lon);
  17:math/pprz_geodetic_double.c ****   const double cos_lon = cos(def->lla.lon);
  18:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[0] = -sin_lon;
  19:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[1] =  cos_lon;
  20:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[2] =  0.;
  21:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat*cos_lon;
  22:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat*sin_lon;
  23:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[5] =  cos_lat;
  24:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[6] =  cos_lat*cos_lon;
  25:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat*sin_lon;
  26:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[8] =  sin_lat;
  27:math/pprz_geodetic_double.c **** 
  28:math/pprz_geodetic_double.c **** }
  29:math/pprz_geodetic_double.c **** 
  30:math/pprz_geodetic_double.c **** /* http://en.wikipedia.org/wiki/Geodetic_system */
  31:math/pprz_geodetic_double.c **** void lla_of_ecef_d(struct LlaCoor_d* lla, struct EcefCoor_d* ecef) {
  32:math/pprz_geodetic_double.c **** 
  33:math/pprz_geodetic_double.c ****   // FIXME : make an ellipsoid struct
  34:math/pprz_geodetic_double.c ****   static const double a = 6378137.0;           /* earth semimajor axis in meters */
  35:math/pprz_geodetic_double.c ****   static const double f = 1./298.257223563;    /* reciprocal flattening          */
  36:math/pprz_geodetic_double.c ****   const double b = a*(1.-f);                   /* semi-minor axis                */
  37:math/pprz_geodetic_double.c ****   const double b2 = b*b;
  38:math/pprz_geodetic_double.c **** 
  39:math/pprz_geodetic_double.c ****   const double e2 = 2.*f-(f*f);                /* first eccentricity squared     */
  40:math/pprz_geodetic_double.c ****   const double ep2 = f*(2.-f)/((1.-f)*(1.-f)); /* second eccentricity squared    */
  41:math/pprz_geodetic_double.c ****   const double E2 = a*a - b2;
  42:math/pprz_geodetic_double.c **** 
  43:math/pprz_geodetic_double.c **** 
  44:math/pprz_geodetic_double.c ****   const double z2 = ecef->z*ecef->z;
  45:math/pprz_geodetic_double.c ****   const double r2 = ecef->x*ecef->x+ecef->y*ecef->y;
  46:math/pprz_geodetic_double.c ****   const double r = sqrt(r2);
  47:math/pprz_geodetic_double.c ****   const double F = 54.*b2*z2;
  48:math/pprz_geodetic_double.c ****   const double G = r2 + (1-e2)*z2 - e2*E2;
  49:math/pprz_geodetic_double.c ****   const double c = (e2*e2*F*r2)/(G*G*G);
  50:math/pprz_geodetic_double.c ****   const double s = pow( (1 + c + sqrt(c*c + 2*c)), 1./3.);
  51:math/pprz_geodetic_double.c ****   const double s1 = 1+s+1/s;
  52:math/pprz_geodetic_double.c ****   const double P = F/(3*s1*s1*G*G);
  53:math/pprz_geodetic_double.c ****   const double Q = sqrt(1+2*e2*e2*P);
  54:math/pprz_geodetic_double.c ****   const double ro = -(e2*P*r)/(1+Q) + sqrt((a*a/2)*(1+1/Q) - ((1-e2)*P*z2)/(Q*(1+Q)) - P*r2/2);
  55:math/pprz_geodetic_double.c ****   const double tmp = (r - e2*ro)*(r - e2*ro);
  56:math/pprz_geodetic_double.c ****   const double U = sqrt( tmp + z2 );
  57:math/pprz_geodetic_double.c ****   const double V = sqrt( tmp + (1-e2)*z2 );
  58:math/pprz_geodetic_double.c ****   const double zo = (b2*ecef->z)/(a*V);
  59:math/pprz_geodetic_double.c **** 
  60:math/pprz_geodetic_double.c ****   lla->alt = U*(1 - b2/(a*V));
  61:math/pprz_geodetic_double.c ****   lla->lat = atan((ecef->z + ep2*zo)/r);
  62:math/pprz_geodetic_double.c ****   lla->lon = atan2(ecef->y,ecef->x);
  63:math/pprz_geodetic_double.c **** 
  64:math/pprz_geodetic_double.c **** }
  65:math/pprz_geodetic_double.c **** 
  66:math/pprz_geodetic_double.c **** void ecef_of_lla_d(struct EcefCoor_d* ecef, struct LlaCoor_d* lla) {
  67:math/pprz_geodetic_double.c **** 
  68:math/pprz_geodetic_double.c ****   // FIXME : make an ellipsoid struct
  69:math/pprz_geodetic_double.c ****   static const double a = 6378137.0;           /* earth semimajor axis in meters */
  70:math/pprz_geodetic_double.c ****   static const double f = 1./298.257223563;    /* reciprocal flattening          */
  71:math/pprz_geodetic_double.c ****   const double e2 = 2.*f-(f*f);                /* first eccentricity squared     */
  72:math/pprz_geodetic_double.c **** 
  73:math/pprz_geodetic_double.c ****   const double sin_lat = sin(lla->lat);
  74:math/pprz_geodetic_double.c ****   const double cos_lat = cos(lla->lat);
  75:math/pprz_geodetic_double.c ****   const double sin_lon = sin(lla->lon);
  76:math/pprz_geodetic_double.c ****   const double cos_lon = cos(lla->lon);
  77:math/pprz_geodetic_double.c ****   const double chi = sqrtf(1. - e2*sin_lat*sin_lat);
  78:math/pprz_geodetic_double.c ****   const double a_chi = a / chi;
  79:math/pprz_geodetic_double.c **** 
  80:math/pprz_geodetic_double.c ****   ecef->x = (a_chi + lla->alt) * cos_lat * cos_lon;
  81:math/pprz_geodetic_double.c ****   ecef->y = (a_chi + lla->alt) * cos_lat * sin_lon;
  82:math/pprz_geodetic_double.c ****   ecef->z = (a_chi*(1. - e2) + lla->alt) * sin_lat;
  83:math/pprz_geodetic_double.c **** }
  84:math/pprz_geodetic_double.c **** 
  85:math/pprz_geodetic_double.c **** void enu_of_ecef_point_d(struct EnuCoor_d* enu, struct LtpDef_d* def, struct EcefCoor_d* ecef) {
  35              		.loc 1 85 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 8
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              	.LVL0:
  40 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 48
  43              	.LVL1:
  44              		.loc 1 85 0
  45 0004 0C46     		mov	r4, r1
  46              		.cfi_offset 14, -4
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 10, -12
  49              		.cfi_offset 9, -16
  50              		.cfi_offset 8, -20
  51              		.cfi_offset 7, -24
  52              		.cfi_offset 6, -28
  53              		.cfi_offset 5, -32
  54              		.cfi_offset 4, -36
  55              		.cfi_offset 2, -40
  56              		.cfi_offset 1, -44
  57              		.cfi_offset 0, -48
  58              	.LVL2:
  59 0006 0546     		mov	r5, r0
  60              	.LVL3:
  61 0008 1646     		mov	r6, r2
  62              	.LVL4:
  86:math/pprz_geodetic_double.c ****   struct EcefCoor_d delta;
  87:math/pprz_geodetic_double.c ****   VECT3_DIFF(delta, *ecef, def->ecef);
  63              		.loc 1 87 0
  64 000a D2E90001 		ldrd	r0, [r2]
  65              	.LVL5:
  66 000e D4E90023 		ldrd	r2, [r4]
  67              	.LVL6:
  68 0012 FFF7FEFF 		bl	__aeabi_dsub
  69              	.LVL7:
  70 0016 D4E90223 		ldrd	r2, [r4, #8]
  71 001a 8046     		mov	r8, r0
  72 001c 8946     		mov	r9, r1
  73 001e D6E90201 		ldrd	r0, [r6, #8]
  74 0022 FFF7FEFF 		bl	__aeabi_dsub
  75 0026 D4E90423 		ldrd	r2, [r4, #16]
  76 002a 8246     		mov	sl, r0
  77 002c 8B46     		mov	fp, r1
  78 002e D6E90401 		ldrd	r0, [r6, #16]
  79 0032 FFF7FEFF 		bl	__aeabi_dsub
  88:math/pprz_geodetic_double.c ****   MAT33_VECT3_MUL(*enu, def->ltp_of_ecef, delta);
  80              		.loc 1 88 0
  81 0036 D4E90C23 		ldrd	r2, [r4, #48]
  87:math/pprz_geodetic_double.c ****   VECT3_DIFF(delta, *ecef, def->ecef);
  82              		.loc 1 87 0
  83 003a CDE90001 		strd	r0, [sp]
  84              		.loc 1 88 0
  85 003e 4046     		mov	r0, r8
  86 0040 4946     		mov	r1, r9
  87 0042 FFF7FEFF 		bl	__aeabi_dmul
  88 0046 D4E90E23 		ldrd	r2, [r4, #56]
  89 004a 0646     		mov	r6, r0
  90              	.LVL8:
  91 004c 0F46     		mov	r7, r1
  92 004e 5046     		mov	r0, sl
  93 0050 5946     		mov	r1, fp
  94 0052 FFF7FEFF 		bl	__aeabi_dmul
  95 0056 0246     		mov	r2, r0
  96 0058 0B46     		mov	r3, r1
  97 005a 3046     		mov	r0, r6
  98 005c 3946     		mov	r1, r7
  99 005e FFF7FEFF 		bl	__aeabi_dadd
 100 0062 D4E91023 		ldrd	r2, [r4, #64]
 101 0066 0646     		mov	r6, r0
 102 0068 0F46     		mov	r7, r1
 103 006a DDE90001 		ldrd	r0, [sp]
 104 006e FFF7FEFF 		bl	__aeabi_dmul
 105 0072 0246     		mov	r2, r0
 106 0074 0B46     		mov	r3, r1
 107 0076 3046     		mov	r0, r6
 108 0078 3946     		mov	r1, r7
 109 007a FFF7FEFF 		bl	__aeabi_dadd
 110 007e C5E90001 		strd	r0, [r5]
 111 0082 4046     		mov	r0, r8
 112 0084 D4E91223 		ldrd	r2, [r4, #72]
 113 0088 4946     		mov	r1, r9
 114 008a FFF7FEFF 		bl	__aeabi_dmul
 115 008e D4E91423 		ldrd	r2, [r4, #80]
 116 0092 0646     		mov	r6, r0
 117 0094 0F46     		mov	r7, r1
 118 0096 5046     		mov	r0, sl
 119 0098 5946     		mov	r1, fp
 120 009a FFF7FEFF 		bl	__aeabi_dmul
 121 009e 0246     		mov	r2, r0
 122 00a0 0B46     		mov	r3, r1
 123 00a2 3046     		mov	r0, r6
 124 00a4 3946     		mov	r1, r7
 125 00a6 FFF7FEFF 		bl	__aeabi_dadd
 126 00aa D4E91623 		ldrd	r2, [r4, #88]
 127 00ae 0646     		mov	r6, r0
 128 00b0 0F46     		mov	r7, r1
 129 00b2 DDE90001 		ldrd	r0, [sp]
 130 00b6 FFF7FEFF 		bl	__aeabi_dmul
 131 00ba 0246     		mov	r2, r0
 132 00bc 0B46     		mov	r3, r1
 133 00be 3046     		mov	r0, r6
 134 00c0 3946     		mov	r1, r7
 135 00c2 FFF7FEFF 		bl	__aeabi_dadd
 136 00c6 C5E90201 		strd	r0, [r5, #8]
 137 00ca 4046     		mov	r0, r8
 138 00cc D4E91823 		ldrd	r2, [r4, #96]
 139 00d0 4946     		mov	r1, r9
 140 00d2 FFF7FEFF 		bl	__aeabi_dmul
 141 00d6 D4E91A23 		ldrd	r2, [r4, #104]
 142 00da 0646     		mov	r6, r0
 143 00dc 0F46     		mov	r7, r1
 144 00de 5046     		mov	r0, sl
 145 00e0 5946     		mov	r1, fp
 146 00e2 FFF7FEFF 		bl	__aeabi_dmul
 147 00e6 0246     		mov	r2, r0
 148 00e8 0B46     		mov	r3, r1
 149 00ea 3046     		mov	r0, r6
 150 00ec 3946     		mov	r1, r7
 151 00ee FFF7FEFF 		bl	__aeabi_dadd
 152 00f2 D4E91C23 		ldrd	r2, [r4, #112]
 153 00f6 0646     		mov	r6, r0
 154 00f8 0F46     		mov	r7, r1
 155 00fa DDE90001 		ldrd	r0, [sp]
 156 00fe FFF7FEFF 		bl	__aeabi_dmul
 157 0102 0246     		mov	r2, r0
 158 0104 0B46     		mov	r3, r1
 159 0106 3046     		mov	r0, r6
 160 0108 3946     		mov	r1, r7
 161 010a FFF7FEFF 		bl	__aeabi_dadd
 162 010e C5E90401 		strd	r0, [r5, #16]
  89:math/pprz_geodetic_double.c **** }
 163              		.loc 1 89 0
 164 0112 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 165              		.cfi_endproc
 166              	.LFE5:
 168              		.section	.text.ned_of_ecef_point_d,"ax",%progbits
 169              		.align	1
 170              		.global	ned_of_ecef_point_d
 171              		.thumb
 172              		.thumb_func
 174              	ned_of_ecef_point_d:
 175              	.LFB6:
  90:math/pprz_geodetic_double.c **** 
  91:math/pprz_geodetic_double.c **** void ned_of_ecef_point_d(struct NedCoor_d* ned, struct LtpDef_d* def, struct EcefCoor_d* ecef) {
 176              		.loc 1 91 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 24
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              	.LVL9:
 181 0000 10B5     		push	{r4, lr}
 182              	.LCFI1:
 183              		.cfi_def_cfa_offset 8
 184 0002 86B0     		sub	sp, sp, #24
 185              	.LCFI2:
 186              		.cfi_def_cfa_offset 32
 187              		.loc 1 91 0
 188 0004 0446     		mov	r4, r0
 189              		.cfi_offset 14, -4
 190              		.cfi_offset 4, -8
  92:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
  93:math/pprz_geodetic_double.c ****   enu_of_ecef_point_d(&enu, def, ecef);
 191              		.loc 1 93 0
 192 0006 6846     		mov	r0, sp
 193              	.LVL10:
 194 0008 FFF7FEFF 		bl	enu_of_ecef_point_d
 195              	.LVL11:
  94:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(*ned, enu);
 196              		.loc 1 94 0
 197 000c DDE90223 		ldrd	r2, [sp, #8]
 198 0010 C4E90023 		strd	r2, [r4]
 199 0014 DDE90023 		ldrd	r2, [sp]
 200 0018 C4E90223 		strd	r2, [r4, #8]
 201 001c 049B     		ldr	r3, [sp, #16]
 202 001e 2361     		str	r3, [r4, #16]
 203 0020 059B     		ldr	r3, [sp, #20]
 204 0022 03F10043 		add	r3, r3, #-2147483648
 205 0026 6361     		str	r3, [r4, #20]
  95:math/pprz_geodetic_double.c **** }
 206              		.loc 1 95 0
 207 0028 06B0     		add	sp, sp, #24
 208 002a 10BD     		pop	{r4, pc}
 209              		.cfi_endproc
 210              	.LFE6:
 212              		.section	.text.enu_of_ecef_vect_d,"ax",%progbits
 213              		.align	1
 214              		.global	enu_of_ecef_vect_d
 215              		.thumb
 216              		.thumb_func
 218              	enu_of_ecef_vect_d:
 219              	.LFB7:
  96:math/pprz_geodetic_double.c **** 
  97:math/pprz_geodetic_double.c **** void enu_of_ecef_vect_d(struct EnuCoor_d* enu, struct LtpDef_d* def, struct EcefCoor_d* ecef) {
 220              		.loc 1 97 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 8
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              	.LVL12:
 225 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 226              	.LCFI3:
 227              		.cfi_def_cfa_offset 48
 228              	.LVL13:
  98:math/pprz_geodetic_double.c ****   MAT33_VECT3_MUL(*enu, def->ltp_of_ecef, *ecef);
 229              		.loc 1 98 0
 230 0004 D2E90067 		ldrd	r6, [r2]
 231              		.cfi_offset 14, -4
 232              		.cfi_offset 11, -8
 233              		.cfi_offset 10, -12
 234              		.cfi_offset 9, -16
 235              		.cfi_offset 8, -20
 236              		.cfi_offset 7, -24
 237              		.cfi_offset 6, -28
 238              		.cfi_offset 5, -32
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 2, -40
 241              		.cfi_offset 1, -44
 242              		.cfi_offset 0, -48
 243              	.LVL14:
 244 0008 D2E90289 		ldrd	r8, [r2, #8]
  97:math/pprz_geodetic_double.c **** void enu_of_ecef_vect_d(struct EnuCoor_d* enu, struct LtpDef_d* def, struct EcefCoor_d* ecef) {
 245              		.loc 1 97 0
 246 000c 0C46     		mov	r4, r1
 247              	.LVL15:
 248 000e 0546     		mov	r5, r0
 249              	.LVL16:
 250              		.loc 1 98 0
 251 0010 D2E90401 		ldrd	r0, [r2, #16]
 252              	.LVL17:
 253 0014 D4E90C23 		ldrd	r2, [r4, #48]
 254              	.LVL18:
 255 0018 CDE90001 		strd	r0, [sp]
 256 001c 3046     		mov	r0, r6
 257 001e 3946     		mov	r1, r7
 258              	.LVL19:
 259 0020 FFF7FEFF 		bl	__aeabi_dmul
 260 0024 D4E90E23 		ldrd	r2, [r4, #56]
 261 0028 8246     		mov	sl, r0
 262 002a 8B46     		mov	fp, r1
 263 002c 4046     		mov	r0, r8
 264 002e 4946     		mov	r1, r9
 265 0030 FFF7FEFF 		bl	__aeabi_dmul
 266 0034 0246     		mov	r2, r0
 267 0036 0B46     		mov	r3, r1
 268 0038 5046     		mov	r0, sl
 269 003a 5946     		mov	r1, fp
 270 003c FFF7FEFF 		bl	__aeabi_dadd
 271 0040 D4E91023 		ldrd	r2, [r4, #64]
 272 0044 8246     		mov	sl, r0
 273 0046 8B46     		mov	fp, r1
 274 0048 DDE90001 		ldrd	r0, [sp]
 275 004c FFF7FEFF 		bl	__aeabi_dmul
 276 0050 0246     		mov	r2, r0
 277 0052 0B46     		mov	r3, r1
 278 0054 5046     		mov	r0, sl
 279 0056 5946     		mov	r1, fp
 280 0058 FFF7FEFF 		bl	__aeabi_dadd
 281 005c C5E90001 		strd	r0, [r5]
 282 0060 3046     		mov	r0, r6
 283 0062 D4E91223 		ldrd	r2, [r4, #72]
 284 0066 3946     		mov	r1, r7
 285 0068 FFF7FEFF 		bl	__aeabi_dmul
 286 006c D4E91423 		ldrd	r2, [r4, #80]
 287 0070 8246     		mov	sl, r0
 288 0072 8B46     		mov	fp, r1
 289 0074 4046     		mov	r0, r8
 290 0076 4946     		mov	r1, r9
 291 0078 FFF7FEFF 		bl	__aeabi_dmul
 292 007c 0246     		mov	r2, r0
 293 007e 0B46     		mov	r3, r1
 294 0080 5046     		mov	r0, sl
 295 0082 5946     		mov	r1, fp
 296 0084 FFF7FEFF 		bl	__aeabi_dadd
 297 0088 D4E91623 		ldrd	r2, [r4, #88]
 298 008c 8246     		mov	sl, r0
 299 008e 8B46     		mov	fp, r1
 300 0090 DDE90001 		ldrd	r0, [sp]
 301 0094 FFF7FEFF 		bl	__aeabi_dmul
 302 0098 0246     		mov	r2, r0
 303 009a 0B46     		mov	r3, r1
 304 009c 5046     		mov	r0, sl
 305 009e 5946     		mov	r1, fp
 306 00a0 FFF7FEFF 		bl	__aeabi_dadd
 307 00a4 C5E90201 		strd	r0, [r5, #8]
 308 00a8 3046     		mov	r0, r6
 309 00aa D4E91823 		ldrd	r2, [r4, #96]
 310 00ae 3946     		mov	r1, r7
 311 00b0 FFF7FEFF 		bl	__aeabi_dmul
 312 00b4 D4E91A23 		ldrd	r2, [r4, #104]
 313 00b8 0646     		mov	r6, r0
 314 00ba 0F46     		mov	r7, r1
 315 00bc 4046     		mov	r0, r8
 316 00be 4946     		mov	r1, r9
 317 00c0 FFF7FEFF 		bl	__aeabi_dmul
 318 00c4 0246     		mov	r2, r0
 319 00c6 0B46     		mov	r3, r1
 320 00c8 3046     		mov	r0, r6
 321 00ca 3946     		mov	r1, r7
 322 00cc FFF7FEFF 		bl	__aeabi_dadd
 323 00d0 D4E91C23 		ldrd	r2, [r4, #112]
 324 00d4 0646     		mov	r6, r0
 325 00d6 0F46     		mov	r7, r1
 326 00d8 DDE90001 		ldrd	r0, [sp]
 327 00dc FFF7FEFF 		bl	__aeabi_dmul
 328 00e0 0246     		mov	r2, r0
 329 00e2 0B46     		mov	r3, r1
 330 00e4 3046     		mov	r0, r6
 331 00e6 3946     		mov	r1, r7
 332 00e8 FFF7FEFF 		bl	__aeabi_dadd
 333 00ec C5E90401 		strd	r0, [r5, #16]
  99:math/pprz_geodetic_double.c **** }
 334              		.loc 1 99 0
 335 00f0 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 336              		.cfi_endproc
 337              	.LFE7:
 339              		.section	.text.ned_of_ecef_vect_d,"ax",%progbits
 340              		.align	1
 341              		.global	ned_of_ecef_vect_d
 342              		.thumb
 343              		.thumb_func
 345              	ned_of_ecef_vect_d:
 346              	.LFB8:
 100:math/pprz_geodetic_double.c **** 
 101:math/pprz_geodetic_double.c **** void ned_of_ecef_vect_d(struct NedCoor_d* ned, struct LtpDef_d* def, struct EcefCoor_d* ecef) {
 347              		.loc 1 101 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 24
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              	.LVL20:
 352 0000 10B5     		push	{r4, lr}
 353              	.LCFI4:
 354              		.cfi_def_cfa_offset 8
 355 0002 86B0     		sub	sp, sp, #24
 356              	.LCFI5:
 357              		.cfi_def_cfa_offset 32
 358              		.loc 1 101 0
 359 0004 0446     		mov	r4, r0
 360              		.cfi_offset 14, -4
 361              		.cfi_offset 4, -8
 102:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
 103:math/pprz_geodetic_double.c ****   enu_of_ecef_vect_d(&enu, def, ecef);
 362              		.loc 1 103 0
 363 0006 6846     		mov	r0, sp
 364              	.LVL21:
 365 0008 FFF7FEFF 		bl	enu_of_ecef_vect_d
 366              	.LVL22:
 104:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(*ned, enu);
 367              		.loc 1 104 0
 368 000c DDE90223 		ldrd	r2, [sp, #8]
 369 0010 C4E90023 		strd	r2, [r4]
 370 0014 DDE90023 		ldrd	r2, [sp]
 371 0018 C4E90223 		strd	r2, [r4, #8]
 372 001c 049B     		ldr	r3, [sp, #16]
 373 001e 2361     		str	r3, [r4, #16]
 374 0020 059B     		ldr	r3, [sp, #20]
 375 0022 03F10043 		add	r3, r3, #-2147483648
 376 0026 6361     		str	r3, [r4, #20]
 105:math/pprz_geodetic_double.c **** }
 377              		.loc 1 105 0
 378 0028 06B0     		add	sp, sp, #24
 379 002a 10BD     		pop	{r4, pc}
 380              		.cfi_endproc
 381              	.LFE8:
 383              		.section	.text.ecef_of_enu_point_d,"ax",%progbits
 384              		.align	1
 385              		.global	ecef_of_enu_point_d
 386              		.thumb
 387              		.thumb_func
 389              	ecef_of_enu_point_d:
 390              	.LFB9:
 106:math/pprz_geodetic_double.c **** 
 107:math/pprz_geodetic_double.c **** 
 108:math/pprz_geodetic_double.c **** 
 109:math/pprz_geodetic_double.c **** void ecef_of_enu_point_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct EnuCoor_d* enu) {
 391              		.loc 1 109 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 16
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              	.LVL23:
 396 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 397              	.LCFI6:
 398              		.cfi_def_cfa_offset 36
 110:math/pprz_geodetic_double.c ****   MAT33_VECT3_TRANSP_MUL(*ecef, def->ltp_of_ecef, *enu);
 399              		.loc 1 110 0
 400 0004 D2E90067 		ldrd	r6, [r2]
 401              		.cfi_offset 14, -4
 402              		.cfi_offset 11, -8
 403              		.cfi_offset 10, -12
 404              		.cfi_offset 9, -16
 405              		.cfi_offset 8, -20
 406              		.cfi_offset 7, -24
 407              		.cfi_offset 6, -28
 408              		.cfi_offset 5, -32
 409              		.cfi_offset 4, -36
 410 0008 D2E90289 		ldrd	r8, [r2, #8]
 109:math/pprz_geodetic_double.c **** void ecef_of_enu_point_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct EnuCoor_d* enu) {
 411              		.loc 1 109 0
 412 000c 85B0     		sub	sp, sp, #20
 413              	.LCFI7:
 414              		.cfi_def_cfa_offset 56
 109:math/pprz_geodetic_double.c **** void ecef_of_enu_point_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct EnuCoor_d* enu) {
 415              		.loc 1 109 0
 416 000e 0C46     		mov	r4, r1
 417 0010 0546     		mov	r5, r0
 418              		.loc 1 110 0
 419 0012 D2E90401 		ldrd	r0, [r2, #16]
 420              	.LVL24:
 421 0016 D4E90C23 		ldrd	r2, [r4, #48]
 422              	.LVL25:
 423 001a CDE90001 		strd	r0, [sp]
 424 001e 3046     		mov	r0, r6
 425 0020 3946     		mov	r1, r7
 426              	.LVL26:
 427 0022 FFF7FEFF 		bl	__aeabi_dmul
 428 0026 D4E91223 		ldrd	r2, [r4, #72]
 429 002a 8246     		mov	sl, r0
 430 002c 8B46     		mov	fp, r1
 431 002e 4046     		mov	r0, r8
 432 0030 4946     		mov	r1, r9
 433 0032 FFF7FEFF 		bl	__aeabi_dmul
 434 0036 0246     		mov	r2, r0
 435 0038 0B46     		mov	r3, r1
 436 003a 5046     		mov	r0, sl
 437 003c 5946     		mov	r1, fp
 438 003e FFF7FEFF 		bl	__aeabi_dadd
 439 0042 D4E91823 		ldrd	r2, [r4, #96]
 440 0046 8246     		mov	sl, r0
 441 0048 8B46     		mov	fp, r1
 442 004a DDE90001 		ldrd	r0, [sp]
 443 004e FFF7FEFF 		bl	__aeabi_dmul
 444 0052 0246     		mov	r2, r0
 445 0054 0B46     		mov	r3, r1
 446 0056 5046     		mov	r0, sl
 447 0058 5946     		mov	r1, fp
 448 005a FFF7FEFF 		bl	__aeabi_dadd
 449 005e C5E90001 		strd	r0, [r5]
 450 0062 CDE90201 		strd	r0, [sp, #8]
 451 0066 D4E90E23 		ldrd	r2, [r4, #56]
 452 006a 3046     		mov	r0, r6
 453 006c 3946     		mov	r1, r7
 454 006e FFF7FEFF 		bl	__aeabi_dmul
 455 0072 D4E91423 		ldrd	r2, [r4, #80]
 456 0076 8246     		mov	sl, r0
 457 0078 8B46     		mov	fp, r1
 458 007a 4046     		mov	r0, r8
 459 007c 4946     		mov	r1, r9
 460 007e FFF7FEFF 		bl	__aeabi_dmul
 461 0082 0246     		mov	r2, r0
 462 0084 0B46     		mov	r3, r1
 463 0086 5046     		mov	r0, sl
 464 0088 5946     		mov	r1, fp
 465 008a FFF7FEFF 		bl	__aeabi_dadd
 466 008e D4E91A23 		ldrd	r2, [r4, #104]
 467 0092 8246     		mov	sl, r0
 468 0094 8B46     		mov	fp, r1
 469 0096 DDE90001 		ldrd	r0, [sp]
 470 009a FFF7FEFF 		bl	__aeabi_dmul
 471 009e 0246     		mov	r2, r0
 472 00a0 0B46     		mov	r3, r1
 473 00a2 5046     		mov	r0, sl
 474 00a4 5946     		mov	r1, fp
 475 00a6 FFF7FEFF 		bl	__aeabi_dadd
 476 00aa 8246     		mov	sl, r0
 477 00ac 8B46     		mov	fp, r1
 478 00ae C5E902AB 		strd	sl, [r5, #8]
 479 00b2 3046     		mov	r0, r6
 480 00b4 D4E91023 		ldrd	r2, [r4, #64]
 481 00b8 3946     		mov	r1, r7
 482 00ba FFF7FEFF 		bl	__aeabi_dmul
 483 00be D4E91623 		ldrd	r2, [r4, #88]
 484 00c2 0646     		mov	r6, r0
 485 00c4 0F46     		mov	r7, r1
 486 00c6 4046     		mov	r0, r8
 487 00c8 4946     		mov	r1, r9
 488 00ca FFF7FEFF 		bl	__aeabi_dmul
 489 00ce 0246     		mov	r2, r0
 490 00d0 0B46     		mov	r3, r1
 491 00d2 3046     		mov	r0, r6
 492 00d4 3946     		mov	r1, r7
 493 00d6 FFF7FEFF 		bl	__aeabi_dadd
 494 00da D4E91C23 		ldrd	r2, [r4, #112]
 495 00de 0646     		mov	r6, r0
 496 00e0 0F46     		mov	r7, r1
 497 00e2 DDE90001 		ldrd	r0, [sp]
 498 00e6 FFF7FEFF 		bl	__aeabi_dmul
 499 00ea 0246     		mov	r2, r0
 500 00ec 0B46     		mov	r3, r1
 501 00ee 3046     		mov	r0, r6
 502 00f0 3946     		mov	r1, r7
 503 00f2 FFF7FEFF 		bl	__aeabi_dadd
 111:math/pprz_geodetic_double.c ****   VECT3_ADD(*ecef, def->ecef);
 504              		.loc 1 111 0
 505 00f6 D4E90023 		ldrd	r2, [r4]
 110:math/pprz_geodetic_double.c ****   MAT33_VECT3_TRANSP_MUL(*ecef, def->ltp_of_ecef, *enu);
 506              		.loc 1 110 0
 507 00fa 0646     		mov	r6, r0
 508 00fc 0F46     		mov	r7, r1
 509 00fe C5E90467 		strd	r6, [r5, #16]
 510              		.loc 1 111 0
 511 0102 DDE90201 		ldrd	r0, [sp, #8]
 512 0106 FFF7FEFF 		bl	__aeabi_dadd
 513 010a C5E90001 		strd	r0, [r5]
 514 010e D4E90223 		ldrd	r2, [r4, #8]
 515 0112 5046     		mov	r0, sl
 516 0114 5946     		mov	r1, fp
 517 0116 FFF7FEFF 		bl	__aeabi_dadd
 518 011a D4E90423 		ldrd	r2, [r4, #16]
 519 011e C5E90201 		strd	r0, [r5, #8]
 520 0122 3046     		mov	r0, r6
 521 0124 3946     		mov	r1, r7
 522 0126 FFF7FEFF 		bl	__aeabi_dadd
 523 012a C5E90401 		strd	r0, [r5, #16]
 112:math/pprz_geodetic_double.c **** }
 524              		.loc 1 112 0
 525 012e 05B0     		add	sp, sp, #20
 526 0130 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 527              		.cfi_endproc
 528              	.LFE9:
 530              		.section	.text.ecef_of_ned_point_d,"ax",%progbits
 531              		.align	1
 532              		.global	ecef_of_ned_point_d
 533              		.thumb
 534              		.thumb_func
 536              	ecef_of_ned_point_d:
 537              	.LFB10:
 113:math/pprz_geodetic_double.c **** 
 114:math/pprz_geodetic_double.c **** void ecef_of_ned_point_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct NedCoor_d* ned) {
 538              		.loc 1 114 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 24
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL27:
 543 0000 30B5     		push	{r4, r5, lr}
 544              	.LCFI8:
 545              		.cfi_def_cfa_offset 12
 115:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
 116:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 546              		.loc 1 116 0
 547 0002 D2E90245 		ldrd	r4, [r2, #8]
 548              		.cfi_offset 14, -4
 549              		.cfi_offset 5, -8
 550              		.cfi_offset 4, -12
 114:math/pprz_geodetic_double.c **** void ecef_of_ned_point_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct NedCoor_d* ned) {
 551              		.loc 1 114 0
 552 0006 87B0     		sub	sp, sp, #28
 553              	.LCFI9:
 554              		.cfi_def_cfa_offset 40
 555              		.loc 1 116 0
 556 0008 CDE90045 		strd	r4, [sp]
 557 000c D2E90045 		ldrd	r4, [r2]
 558 0010 CDE90245 		strd	r4, [sp, #8]
 559 0014 1369     		ldr	r3, [r2, #16]
 560 0016 0493     		str	r3, [sp, #16]
 561 0018 5369     		ldr	r3, [r2, #20]
 117:math/pprz_geodetic_double.c ****   ecef_of_enu_point_d(ecef, def, &enu);
 562              		.loc 1 117 0
 563 001a 6A46     		mov	r2, sp
 564              	.LVL28:
 116:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 565              		.loc 1 116 0
 566 001c 03F10043 		add	r3, r3, #-2147483648
 567 0020 0593     		str	r3, [sp, #20]
 568              		.loc 1 117 0
 569 0022 FFF7FEFF 		bl	ecef_of_enu_point_d
 570              	.LVL29:
 118:math/pprz_geodetic_double.c **** }
 571              		.loc 1 118 0
 572 0026 07B0     		add	sp, sp, #28
 573 0028 30BD     		pop	{r4, r5, pc}
 574              		.cfi_endproc
 575              	.LFE10:
 577              		.section	.text.ecef_of_enu_vect_d,"ax",%progbits
 578              		.align	1
 579              		.global	ecef_of_enu_vect_d
 580              		.thumb
 581              		.thumb_func
 583              	ecef_of_enu_vect_d:
 584              	.LFB11:
 119:math/pprz_geodetic_double.c **** 
 120:math/pprz_geodetic_double.c **** void ecef_of_enu_vect_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct EnuCoor_d* enu) {
 585              		.loc 1 120 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 8
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              	.LVL30:
 590 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 591              	.LCFI10:
 592              		.cfi_def_cfa_offset 48
 593              	.LVL31:
 121:math/pprz_geodetic_double.c ****   MAT33_VECT3_TRANSP_MUL(*ecef, def->ltp_of_ecef, *enu);
 594              		.loc 1 121 0
 595 0004 D2E90067 		ldrd	r6, [r2]
 596              		.cfi_offset 14, -4
 597              		.cfi_offset 11, -8
 598              		.cfi_offset 10, -12
 599              		.cfi_offset 9, -16
 600              		.cfi_offset 8, -20
 601              		.cfi_offset 7, -24
 602              		.cfi_offset 6, -28
 603              		.cfi_offset 5, -32
 604              		.cfi_offset 4, -36
 605              		.cfi_offset 2, -40
 606              		.cfi_offset 1, -44
 607              		.cfi_offset 0, -48
 608              	.LVL32:
 609 0008 D2E90289 		ldrd	r8, [r2, #8]
 120:math/pprz_geodetic_double.c **** void ecef_of_enu_vect_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct EnuCoor_d* enu) {
 610              		.loc 1 120 0
 611 000c 0C46     		mov	r4, r1
 612              	.LVL33:
 613 000e 0546     		mov	r5, r0
 614              	.LVL34:
 615              		.loc 1 121 0
 616 0010 D2E90401 		ldrd	r0, [r2, #16]
 617              	.LVL35:
 618 0014 D4E90C23 		ldrd	r2, [r4, #48]
 619              	.LVL36:
 620 0018 CDE90001 		strd	r0, [sp]
 621 001c 3046     		mov	r0, r6
 622 001e 3946     		mov	r1, r7
 623              	.LVL37:
 624 0020 FFF7FEFF 		bl	__aeabi_dmul
 625 0024 D4E91223 		ldrd	r2, [r4, #72]
 626 0028 8246     		mov	sl, r0
 627 002a 8B46     		mov	fp, r1
 628 002c 4046     		mov	r0, r8
 629 002e 4946     		mov	r1, r9
 630 0030 FFF7FEFF 		bl	__aeabi_dmul
 631 0034 0246     		mov	r2, r0
 632 0036 0B46     		mov	r3, r1
 633 0038 5046     		mov	r0, sl
 634 003a 5946     		mov	r1, fp
 635 003c FFF7FEFF 		bl	__aeabi_dadd
 636 0040 D4E91823 		ldrd	r2, [r4, #96]
 637 0044 8246     		mov	sl, r0
 638 0046 8B46     		mov	fp, r1
 639 0048 DDE90001 		ldrd	r0, [sp]
 640 004c FFF7FEFF 		bl	__aeabi_dmul
 641 0050 0246     		mov	r2, r0
 642 0052 0B46     		mov	r3, r1
 643 0054 5046     		mov	r0, sl
 644 0056 5946     		mov	r1, fp
 645 0058 FFF7FEFF 		bl	__aeabi_dadd
 646 005c C5E90001 		strd	r0, [r5]
 647 0060 3046     		mov	r0, r6
 648 0062 D4E90E23 		ldrd	r2, [r4, #56]
 649 0066 3946     		mov	r1, r7
 650 0068 FFF7FEFF 		bl	__aeabi_dmul
 651 006c D4E91423 		ldrd	r2, [r4, #80]
 652 0070 8246     		mov	sl, r0
 653 0072 8B46     		mov	fp, r1
 654 0074 4046     		mov	r0, r8
 655 0076 4946     		mov	r1, r9
 656 0078 FFF7FEFF 		bl	__aeabi_dmul
 657 007c 0246     		mov	r2, r0
 658 007e 0B46     		mov	r3, r1
 659 0080 5046     		mov	r0, sl
 660 0082 5946     		mov	r1, fp
 661 0084 FFF7FEFF 		bl	__aeabi_dadd
 662 0088 D4E91A23 		ldrd	r2, [r4, #104]
 663 008c 8246     		mov	sl, r0
 664 008e 8B46     		mov	fp, r1
 665 0090 DDE90001 		ldrd	r0, [sp]
 666 0094 FFF7FEFF 		bl	__aeabi_dmul
 667 0098 0246     		mov	r2, r0
 668 009a 0B46     		mov	r3, r1
 669 009c 5046     		mov	r0, sl
 670 009e 5946     		mov	r1, fp
 671 00a0 FFF7FEFF 		bl	__aeabi_dadd
 672 00a4 C5E90201 		strd	r0, [r5, #8]
 673 00a8 3046     		mov	r0, r6
 674 00aa D4E91023 		ldrd	r2, [r4, #64]
 675 00ae 3946     		mov	r1, r7
 676 00b0 FFF7FEFF 		bl	__aeabi_dmul
 677 00b4 D4E91623 		ldrd	r2, [r4, #88]
 678 00b8 0646     		mov	r6, r0
 679 00ba 0F46     		mov	r7, r1
 680 00bc 4046     		mov	r0, r8
 681 00be 4946     		mov	r1, r9
 682 00c0 FFF7FEFF 		bl	__aeabi_dmul
 683 00c4 0246     		mov	r2, r0
 684 00c6 0B46     		mov	r3, r1
 685 00c8 3046     		mov	r0, r6
 686 00ca 3946     		mov	r1, r7
 687 00cc FFF7FEFF 		bl	__aeabi_dadd
 688 00d0 D4E91C23 		ldrd	r2, [r4, #112]
 689 00d4 0646     		mov	r6, r0
 690 00d6 0F46     		mov	r7, r1
 691 00d8 DDE90001 		ldrd	r0, [sp]
 692 00dc FFF7FEFF 		bl	__aeabi_dmul
 693 00e0 0246     		mov	r2, r0
 694 00e2 0B46     		mov	r3, r1
 695 00e4 3046     		mov	r0, r6
 696 00e6 3946     		mov	r1, r7
 697 00e8 FFF7FEFF 		bl	__aeabi_dadd
 698 00ec C5E90401 		strd	r0, [r5, #16]
 122:math/pprz_geodetic_double.c **** }
 699              		.loc 1 122 0
 700 00f0 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 701              		.cfi_endproc
 702              	.LFE11:
 704              		.section	.text.ecef_of_ned_vect_d,"ax",%progbits
 705              		.align	1
 706              		.global	ecef_of_ned_vect_d
 707              		.thumb
 708              		.thumb_func
 710              	ecef_of_ned_vect_d:
 711              	.LFB12:
 123:math/pprz_geodetic_double.c **** 
 124:math/pprz_geodetic_double.c **** void ecef_of_ned_vect_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct NedCoor_d* ned) {
 712              		.loc 1 124 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 24
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716              	.LVL38:
 717 0000 30B5     		push	{r4, r5, lr}
 718              	.LCFI11:
 719              		.cfi_def_cfa_offset 12
 125:math/pprz_geodetic_double.c ****   struct EnuCoor_d enu;
 126:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 720              		.loc 1 126 0
 721 0002 D2E90245 		ldrd	r4, [r2, #8]
 722              		.cfi_offset 14, -4
 723              		.cfi_offset 5, -8
 724              		.cfi_offset 4, -12
 124:math/pprz_geodetic_double.c **** void ecef_of_ned_vect_d(struct EcefCoor_d* ecef, struct LtpDef_d* def, struct NedCoor_d* ned) {
 725              		.loc 1 124 0
 726 0006 87B0     		sub	sp, sp, #28
 727              	.LCFI12:
 728              		.cfi_def_cfa_offset 40
 729              		.loc 1 126 0
 730 0008 CDE90045 		strd	r4, [sp]
 731 000c D2E90045 		ldrd	r4, [r2]
 732 0010 CDE90245 		strd	r4, [sp, #8]
 733 0014 1369     		ldr	r3, [r2, #16]
 734 0016 0493     		str	r3, [sp, #16]
 735 0018 5369     		ldr	r3, [r2, #20]
 127:math/pprz_geodetic_double.c ****   ecef_of_enu_vect_d(ecef, def, &enu);
 736              		.loc 1 127 0
 737 001a 6A46     		mov	r2, sp
 738              	.LVL39:
 126:math/pprz_geodetic_double.c ****   ENU_OF_TO_NED(enu, *ned);
 739              		.loc 1 126 0
 740 001c 03F10043 		add	r3, r3, #-2147483648
 741 0020 0593     		str	r3, [sp, #20]
 742              		.loc 1 127 0
 743 0022 FFF7FEFF 		bl	ecef_of_enu_vect_d
 744              	.LVL40:
 128:math/pprz_geodetic_double.c **** }
 745              		.loc 1 128 0
 746 0026 07B0     		add	sp, sp, #28
 747 0028 30BD     		pop	{r4, r5, pc}
 748              		.cfi_endproc
 749              	.LFE12:
 751              		.section	.text.gc_of_gd_lat_d,"ax",%progbits
 752              		.align	1
 753              		.global	gc_of_gd_lat_d
 754              		.thumb
 755              		.thumb_func
 757              	gc_of_gd_lat_d:
 758              	.LFB13:
 129:math/pprz_geodetic_double.c **** 
 130:math/pprz_geodetic_double.c **** /* geocentric latitude of geodetic latitude */
 131:math/pprz_geodetic_double.c **** double gc_of_gd_lat_d(double gd_lat, double hmsl) {
 759              		.loc 1 131 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 16
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763              	.LVL41:
 764 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 765              	.LCFI13:
 766              		.cfi_def_cfa_offset 36
 767 0004 85B0     		sub	sp, sp, #20
 768              	.LCFI14:
 769              		.cfi_def_cfa_offset 56
 770              		.loc 1 131 0
 771 0006 1446     		mov	r4, r2
 772              		.cfi_offset 14, -4
 773              		.cfi_offset 11, -8
 774              		.cfi_offset 10, -12
 775              		.cfi_offset 9, -16
 776              		.cfi_offset 8, -20
 777              		.cfi_offset 7, -24
 778              		.cfi_offset 6, -28
 779              		.cfi_offset 5, -32
 780              		.cfi_offset 4, -36
 781 0008 1D46     		mov	r5, r3
 782              	.LVL42:
 783 000a 0646     		mov	r6, r0
 784 000c 0F46     		mov	r7, r1
 785              	.LVL43:
 132:math/pprz_geodetic_double.c ****   const double a = 6378137.0;           /* earth semimajor axis in meters */
 133:math/pprz_geodetic_double.c ****   const double f = 1./298.257223563;    /* reciprocal flattening          */
 134:math/pprz_geodetic_double.c ****   const double c2 = (1.-f)*(1.-f);
 135:math/pprz_geodetic_double.c ****   /* geocentric latitude at the planet surface */
 136:math/pprz_geodetic_double.c ****   double ls = atan(c2*tan(gd_lat));
 786              		.loc 1 136 0
 787 000e FFF7FEFF 		bl	tan
 788              	.LVL44:
 789 0012 2BA3     		adr	r3, .L19
 790 0014 D3E90023 		ldrd	r2, [r3]
 791 0018 FFF7FEFF 		bl	__aeabi_dmul
 792 001c FFF7FEFF 		bl	atan
 793 0020 8046     		mov	r8, r0
 794              	.LVL45:
 795 0022 8946     		mov	r9, r1
 796              	.LVL46:
 137:math/pprz_geodetic_double.c ****   return atan2(hmsl*sin(gd_lat) + a*sin(ls), hmsl*cos(gd_lat) + a*cos(ls));
 797              		.loc 1 137 0
 798 0024 3046     		mov	r0, r6
 799 0026 3946     		mov	r1, r7
 800 0028 FFF7FEFF 		bl	sin
 801 002c 8246     		mov	sl, r0
 802 002e 8B46     		mov	fp, r1
 803 0030 4046     		mov	r0, r8
 804 0032 4946     		mov	r1, r9
 805 0034 FFF7FEFF 		bl	sin
 806 0038 CDE90201 		strd	r0, [sp, #8]
 807 003c 3046     		mov	r0, r6
 808 003e 3946     		mov	r1, r7
 809 0040 FFF7FEFF 		bl	cos
 810 0044 CDE90001 		strd	r0, [sp]
 811 0048 4046     		mov	r0, r8
 812 004a 4946     		mov	r1, r9
 813 004c FFF7FEFF 		bl	cos
 814 0050 5246     		mov	r2, sl
 815 0052 8046     		mov	r8, r0
 816              	.LVL47:
 817 0054 8946     		mov	r9, r1
 818              	.LVL48:
 819 0056 5B46     		mov	r3, fp
 820 0058 2046     		mov	r0, r4
 821 005a 2946     		mov	r1, r5
 822 005c FFF7FEFF 		bl	__aeabi_dmul
 823 0060 19A3     		adr	r3, .L19+8
 824 0062 D3E90023 		ldrd	r2, [r3]
 825 0066 0646     		mov	r6, r0
 826              	.LVL49:
 827 0068 0F46     		mov	r7, r1
 828              	.LVL50:
 829 006a DDE90201 		ldrd	r0, [sp, #8]
 830 006e FFF7FEFF 		bl	__aeabi_dmul
 831 0072 0246     		mov	r2, r0
 832 0074 0B46     		mov	r3, r1
 833 0076 3046     		mov	r0, r6
 834 0078 3946     		mov	r1, r7
 835 007a FFF7FEFF 		bl	__aeabi_dadd
 836 007e DDE90023 		ldrd	r2, [sp]
 837 0082 0646     		mov	r6, r0
 838 0084 0F46     		mov	r7, r1
 839 0086 2046     		mov	r0, r4
 840 0088 2946     		mov	r1, r5
 841 008a FFF7FEFF 		bl	__aeabi_dmul
 842 008e 0EA3     		adr	r3, .L19+8
 843 0090 D3E90023 		ldrd	r2, [r3]
 844 0094 0446     		mov	r4, r0
 845              	.LVL51:
 846 0096 0D46     		mov	r5, r1
 847              	.LVL52:
 848 0098 4046     		mov	r0, r8
 849 009a 4946     		mov	r1, r9
 850 009c FFF7FEFF 		bl	__aeabi_dmul
 851 00a0 0246     		mov	r2, r0
 852 00a2 0B46     		mov	r3, r1
 853 00a4 2046     		mov	r0, r4
 854 00a6 2946     		mov	r1, r5
 855 00a8 FFF7FEFF 		bl	__aeabi_dadd
 856 00ac 0246     		mov	r2, r0
 857 00ae 0B46     		mov	r3, r1
 858 00b0 3046     		mov	r0, r6
 859 00b2 3946     		mov	r1, r7
 138:math/pprz_geodetic_double.c **** }
 860              		.loc 1 138 0
 861 00b4 05B0     		add	sp, sp, #20
 862 00b6 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 137:math/pprz_geodetic_double.c ****   return atan2(hmsl*sin(gd_lat) + a*sin(ls), hmsl*cos(gd_lat) + a*cos(ls));
 863              		.loc 1 137 0
 864 00ba FFF7FEBF 		b	atan2
 865              	.L20:
 866 00be 00BF     		.align	3
 867              	.L19:
 868 00c0 D6021CDE 		.word	-568589610
 869 00c4 28C9EF3F 		.word	1072679208
 870 00c8 00000040 		.word	1073741824
 871 00cc A6545841 		.word	1096307878
 872              		.cfi_endproc
 873              	.LFE13:
 875              		.global	__aeabi_d2f
 876              		.global	__aeabi_f2d
 877              		.global	__aeabi_ddiv
 878              		.section	.text.ecef_of_lla_d,"ax",%progbits
 879              		.align	1
 880              		.global	ecef_of_lla_d
 881              		.thumb
 882              		.thumb_func
 884              	ecef_of_lla_d:
 885              	.LFB4:
  66:math/pprz_geodetic_double.c **** void ecef_of_lla_d(struct EcefCoor_d* ecef, struct LlaCoor_d* lla) {
 886              		.loc 1 66 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 24
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              	.LVL53:
 891 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 892              	.LCFI15:
 893              		.cfi_def_cfa_offset 36
  73:math/pprz_geodetic_double.c ****   const double sin_lat = sin(lla->lat);
 894              		.loc 1 73 0
 895 0004 D1E90289 		ldrd	r8, [r1, #8]
 896              		.cfi_offset 14, -4
 897              		.cfi_offset 11, -8
 898              		.cfi_offset 10, -12
 899              		.cfi_offset 9, -16
 900              		.cfi_offset 8, -20
 901              		.cfi_offset 7, -24
 902              		.cfi_offset 6, -28
 903              		.cfi_offset 5, -32
 904              		.cfi_offset 4, -36
  66:math/pprz_geodetic_double.c **** void ecef_of_lla_d(struct EcefCoor_d* ecef, struct LlaCoor_d* lla) {
 905              		.loc 1 66 0
 906 0008 87B0     		sub	sp, sp, #28
 907              	.LCFI16:
 908              		.cfi_def_cfa_offset 64
  66:math/pprz_geodetic_double.c **** void ecef_of_lla_d(struct EcefCoor_d* ecef, struct LlaCoor_d* lla) {
 909              		.loc 1 66 0
 910 000a 0446     		mov	r4, r0
 911 000c 0D46     		mov	r5, r1
  73:math/pprz_geodetic_double.c ****   const double sin_lat = sin(lla->lat);
 912              		.loc 1 73 0
 913 000e 4046     		mov	r0, r8
 914              	.LVL54:
 915 0010 4946     		mov	r1, r9
 916              	.LVL55:
 917 0012 FFF7FEFF 		bl	sin
 918 0016 0646     		mov	r6, r0
 919              	.LVL56:
 920 0018 0F46     		mov	r7, r1
 921              	.LVL57:
  74:math/pprz_geodetic_double.c ****   const double cos_lat = cos(lla->lat);
 922              		.loc 1 74 0
 923 001a 4046     		mov	r0, r8
 924 001c 4946     		mov	r1, r9
 925 001e FFF7FEFF 		bl	cos
  75:math/pprz_geodetic_double.c ****   const double sin_lon = sin(lla->lon);
 926              		.loc 1 75 0
 927 0022 D5E90089 		ldrd	r8, [r5]
  74:math/pprz_geodetic_double.c ****   const double cos_lat = cos(lla->lat);
 928              		.loc 1 74 0
 929 0026 8246     		mov	sl, r0
 930              	.LVL58:
 931 0028 8B46     		mov	fp, r1
 932              	.LVL59:
  75:math/pprz_geodetic_double.c ****   const double sin_lon = sin(lla->lon);
 933              		.loc 1 75 0
 934 002a 4046     		mov	r0, r8
 935 002c 4946     		mov	r1, r9
 936 002e FFF7FEFF 		bl	sin
 937 0032 CDE90201 		strd	r0, [sp, #8]
  76:math/pprz_geodetic_double.c ****   const double cos_lon = cos(lla->lon);
 938              		.loc 1 76 0
 939 0036 4046     		mov	r0, r8
 940 0038 4946     		mov	r1, r9
 941 003a FFF7FEFF 		bl	cos
  77:math/pprz_geodetic_double.c ****   const double chi = sqrtf(1. - e2*sin_lat*sin_lat);
 942              		.loc 1 77 0
 943 003e 2DA3     		adr	r3, .L23+20
 944 0040 D3E90023 		ldrd	r2, [r3]
  76:math/pprz_geodetic_double.c ****   const double cos_lon = cos(lla->lon);
 945              		.loc 1 76 0
 946 0044 CDE90001 		strd	r0, [sp]
  77:math/pprz_geodetic_double.c ****   const double chi = sqrtf(1. - e2*sin_lat*sin_lat);
 947              		.loc 1 77 0
 948 0048 3046     		mov	r0, r6
 949 004a 3946     		mov	r1, r7
 950 004c FFF7FEFF 		bl	__aeabi_dmul
 951 0050 3246     		mov	r2, r6
 952 0052 3B46     		mov	r3, r7
 953 0054 FFF7FEFF 		bl	__aeabi_dmul
 954 0058 0022     		movs	r2, #0
 955 005a 254B     		ldr	r3, .L23+16
 956 005c FFF7FEFF 		bl	__aeabi_dadd
 957 0060 FFF7FEFF 		bl	__aeabi_d2f
 958 0064 FFF7FEFF 		bl	sqrtf
  78:math/pprz_geodetic_double.c ****   const double a_chi = a / chi;
 959              		.loc 1 78 0
 960 0068 FFF7FEFF 		bl	__aeabi_f2d
 961 006c 0246     		mov	r2, r0
 962 006e 0B46     		mov	r3, r1
 963 0070 1BA1     		adr	r1, .L23
 964 0072 D1E90001 		ldrd	r0, [r1]
 965 0076 FFF7FEFF 		bl	__aeabi_ddiv
  80:math/pprz_geodetic_double.c ****   ecef->x = (a_chi + lla->alt) * cos_lat * cos_lon;
 966              		.loc 1 80 0
 967 007a D5E90489 		ldrd	r8, [r5, #16]
 968 007e 4246     		mov	r2, r8
 969 0080 4B46     		mov	r3, r9
  78:math/pprz_geodetic_double.c ****   const double a_chi = a / chi;
 970              		.loc 1 78 0
 971 0082 CDE90401 		strd	r0, [sp, #16]
  80:math/pprz_geodetic_double.c ****   ecef->x = (a_chi + lla->alt) * cos_lat * cos_lon;
 972              		.loc 1 80 0
 973 0086 FFF7FEFF 		bl	__aeabi_dadd
 974 008a 5246     		mov	r2, sl
 975 008c 5B46     		mov	r3, fp
 976 008e FFF7FEFF 		bl	__aeabi_dmul
 977 0092 DDE90023 		ldrd	r2, [sp]
 978 0096 8246     		mov	sl, r0
 979              	.LVL60:
 980 0098 8B46     		mov	fp, r1
 981              	.LVL61:
 982 009a FFF7FEFF 		bl	__aeabi_dmul
  81:math/pprz_geodetic_double.c ****   ecef->y = (a_chi + lla->alt) * cos_lat * sin_lon;
 983              		.loc 1 81 0
 984 009e DDE90223 		ldrd	r2, [sp, #8]
  80:math/pprz_geodetic_double.c ****   ecef->x = (a_chi + lla->alt) * cos_lat * cos_lon;
 985              		.loc 1 80 0
 986 00a2 C4E90001 		strd	r0, [r4]
  81:math/pprz_geodetic_double.c ****   ecef->y = (a_chi + lla->alt) * cos_lat * sin_lon;
 987              		.loc 1 81 0
 988 00a6 5046     		mov	r0, sl
 989 00a8 5946     		mov	r1, fp
 990 00aa FFF7FEFF 		bl	__aeabi_dmul
  82:math/pprz_geodetic_double.c ****   ecef->z = (a_chi*(1. - e2) + lla->alt) * sin_lat;
 991              		.loc 1 82 0
 992 00ae 0EA3     		adr	r3, .L23+8
 993 00b0 D3E90023 		ldrd	r2, [r3]
  81:math/pprz_geodetic_double.c ****   ecef->y = (a_chi + lla->alt) * cos_lat * sin_lon;
 994              		.loc 1 81 0
 995 00b4 C4E90201 		strd	r0, [r4, #8]
  82:math/pprz_geodetic_double.c ****   ecef->z = (a_chi*(1. - e2) + lla->alt) * sin_lat;
 996              		.loc 1 82 0
 997 00b8 DDE90401 		ldrd	r0, [sp, #16]
 998 00bc FFF7FEFF 		bl	__aeabi_dmul
 999 00c0 4246     		mov	r2, r8
 1000 00c2 4B46     		mov	r3, r9
 1001 00c4 FFF7FEFF 		bl	__aeabi_dadd
 1002 00c8 3246     		mov	r2, r6
 1003 00ca 3B46     		mov	r3, r7
 1004 00cc FFF7FEFF 		bl	__aeabi_dmul
 1005 00d0 C4E90401 		strd	r0, [r4, #16]
  83:math/pprz_geodetic_double.c **** }
 1006              		.loc 1 83 0
 1007 00d4 07B0     		add	sp, sp, #28
 1008 00d6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1009              	.L24:
 1010 00da 00BFAFF3 		.align	3
 1010      0080
 1011              	.L23:
 1012 00e0 00000040 		.word	1073741824
 1013 00e4 A6545841 		.word	1096307878
 1014 00e8 D6021CDE 		.word	-568589610
 1015 00ec 28C9EF3F 		.word	1072679208
 1016 00f0 0000F03F 		.word	1072693248
 1017 00f4 F094FEF1 		.word	-234973968
 1018 00f8 906B7BBF 		.word	-1082430576
 1019              		.cfi_endproc
 1020              	.LFE4:
 1022 00fc AFF30080 		.section	.text.lla_of_ecef_d,"ax",%progbits
 1023              		.align	1
 1024              		.global	lla_of_ecef_d
 1025              		.thumb
 1026              		.thumb_func
 1028              	lla_of_ecef_d:
 1029              	.LFB3:
  31:math/pprz_geodetic_double.c **** void lla_of_ecef_d(struct LlaCoor_d* lla, struct EcefCoor_d* ecef) {
 1030              		.loc 1 31 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 48
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              	.LVL62:
 1035 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1036              	.LCFI17:
 1037              		.cfi_def_cfa_offset 36
 1038 0004 0C46     		mov	r4, r1
 1039              		.cfi_offset 14, -4
 1040              		.cfi_offset 11, -8
 1041              		.cfi_offset 10, -12
 1042              		.cfi_offset 9, -16
 1043              		.cfi_offset 8, -20
 1044              		.cfi_offset 7, -24
 1045              		.cfi_offset 6, -28
 1046              		.cfi_offset 5, -32
 1047              		.cfi_offset 4, -36
 1048 0006 8DB0     		sub	sp, sp, #52
 1049              	.LCFI18:
 1050              		.cfi_def_cfa_offset 88
  31:math/pprz_geodetic_double.c **** void lla_of_ecef_d(struct LlaCoor_d* lla, struct EcefCoor_d* ecef) {
 1051              		.loc 1 31 0
 1052 0008 0546     		mov	r5, r0
  44:math/pprz_geodetic_double.c ****   const double z2 = ecef->z*ecef->z;
 1053              		.loc 1 44 0
 1054 000a D1E90401 		ldrd	r0, [r1, #16]
 1055              	.LVL63:
 1056 000e 0246     		mov	r2, r0
 1057 0010 0B46     		mov	r3, r1
 1058              	.LVL64:
 1059 0012 FFF7FEFF 		bl	__aeabi_dmul
  45:math/pprz_geodetic_double.c ****   const double r2 = ecef->x*ecef->x+ecef->y*ecef->y;
 1060              		.loc 1 45 0
 1061 0016 D4E90289 		ldrd	r8, [r4, #8]
  44:math/pprz_geodetic_double.c ****   const double z2 = ecef->z*ecef->z;
 1062              		.loc 1 44 0
 1063 001a CDE90001 		strd	r0, [sp]
  45:math/pprz_geodetic_double.c ****   const double r2 = ecef->x*ecef->x+ecef->y*ecef->y;
 1064              		.loc 1 45 0
 1065 001e D4E90001 		ldrd	r0, [r4]
 1066 0022 0246     		mov	r2, r0
 1067 0024 0B46     		mov	r3, r1
 1068 0026 FFF7FEFF 		bl	__aeabi_dmul
 1069 002a 4246     		mov	r2, r8
 1070 002c 0646     		mov	r6, r0
 1071 002e 0F46     		mov	r7, r1
 1072 0030 4B46     		mov	r3, r9
 1073 0032 4046     		mov	r0, r8
 1074 0034 4946     		mov	r1, r9
 1075 0036 FFF7FEFF 		bl	__aeabi_dmul
 1076 003a 0246     		mov	r2, r0
 1077 003c 0B46     		mov	r3, r1
 1078 003e 3046     		mov	r0, r6
 1079 0040 3946     		mov	r1, r7
 1080 0042 FFF7FEFF 		bl	__aeabi_dadd
 1081 0046 CDE90601 		strd	r0, [sp, #24]
  46:math/pprz_geodetic_double.c ****   const double r = sqrt(r2);
 1082              		.loc 1 46 0
 1083 004a FFF7FEFF 		bl	sqrt
  47:math/pprz_geodetic_double.c ****   const double F = 54.*b2*z2;
 1084              		.loc 1 47 0
 1085 004e CDA3     		adr	r3, .L27+84
 1086 0050 D3E90023 		ldrd	r2, [r3]
  46:math/pprz_geodetic_double.c ****   const double r = sqrt(r2);
 1087              		.loc 1 46 0
 1088 0054 CDE90401 		strd	r0, [sp, #16]
  47:math/pprz_geodetic_double.c ****   const double F = 54.*b2*z2;
 1089              		.loc 1 47 0
 1090 0058 DDE90001 		ldrd	r0, [sp]
 1091 005c FFF7FEFF 		bl	__aeabi_dmul
  48:math/pprz_geodetic_double.c ****   const double G = r2 + (1-e2)*z2 - e2*E2;
 1092              		.loc 1 48 0
 1093 0060 CAA3     		adr	r3, .L27+92
 1094 0062 D3E90023 		ldrd	r2, [r3]
  47:math/pprz_geodetic_double.c ****   const double F = 54.*b2*z2;
 1095              		.loc 1 47 0
 1096 0066 CDE90201 		strd	r0, [sp, #8]
  48:math/pprz_geodetic_double.c ****   const double G = r2 + (1-e2)*z2 - e2*E2;
 1097              		.loc 1 48 0
 1098 006a DDE90001 		ldrd	r0, [sp]
 1099 006e FFF7FEFF 		bl	__aeabi_dmul
 1100 0072 CDE90801 		strd	r0, [sp, #32]
 1101 0076 DDE90823 		ldrd	r2, [sp, #32]
 1102 007a DDE90601 		ldrd	r0, [sp, #24]
 1103 007e FFF7FEFF 		bl	__aeabi_dadd
 1104 0082 C4A3     		adr	r3, .L27+100
 1105 0084 D3E90023 		ldrd	r2, [r3]
 1106 0088 FFF7FEFF 		bl	__aeabi_dsub
  49:math/pprz_geodetic_double.c ****   const double c = (e2*e2*F*r2)/(G*G*G);
 1107              		.loc 1 49 0
 1108 008c C3A3     		adr	r3, .L27+108
 1109 008e D3E90023 		ldrd	r2, [r3]
  48:math/pprz_geodetic_double.c ****   const double G = r2 + (1-e2)*z2 - e2*E2;
 1110              		.loc 1 48 0
 1111 0092 0646     		mov	r6, r0
 1112 0094 0F46     		mov	r7, r1
  49:math/pprz_geodetic_double.c ****   const double c = (e2*e2*F*r2)/(G*G*G);
 1113              		.loc 1 49 0
 1114 0096 DDE90201 		ldrd	r0, [sp, #8]
 1115 009a FFF7FEFF 		bl	__aeabi_dmul
 1116 009e DDE90623 		ldrd	r2, [sp, #24]
 1117 00a2 FFF7FEFF 		bl	__aeabi_dmul
 1118 00a6 3246     		mov	r2, r6
 1119 00a8 8046     		mov	r8, r0
 1120 00aa 8946     		mov	r9, r1
 1121 00ac 3B46     		mov	r3, r7
 1122 00ae 3046     		mov	r0, r6
 1123 00b0 3946     		mov	r1, r7
 1124 00b2 FFF7FEFF 		bl	__aeabi_dmul
 1125 00b6 3246     		mov	r2, r6
 1126 00b8 3B46     		mov	r3, r7
 1127 00ba FFF7FEFF 		bl	__aeabi_dmul
 1128 00be 0246     		mov	r2, r0
 1129 00c0 0B46     		mov	r3, r1
 1130 00c2 4046     		mov	r0, r8
 1131 00c4 4946     		mov	r1, r9
 1132 00c6 FFF7FEFF 		bl	__aeabi_ddiv
  50:math/pprz_geodetic_double.c ****   const double s = pow( (1 + c + sqrt(c*c + 2*c)), 1./3.);
 1133              		.loc 1 50 0
 1134 00ca 0246     		mov	r2, r0
 1135 00cc 0B46     		mov	r3, r1
  49:math/pprz_geodetic_double.c ****   const double c = (e2*e2*F*r2)/(G*G*G);
 1136              		.loc 1 49 0
 1137 00ce 8046     		mov	r8, r0
 1138 00d0 8946     		mov	r9, r1
  50:math/pprz_geodetic_double.c ****   const double s = pow( (1 + c + sqrt(c*c + 2*c)), 1./3.);
 1139              		.loc 1 50 0
 1140 00d2 FFF7FEFF 		bl	__aeabi_dmul
 1141 00d6 4246     		mov	r2, r8
 1142 00d8 8246     		mov	sl, r0
 1143 00da 8B46     		mov	fp, r1
 1144 00dc 4B46     		mov	r3, r9
 1145 00de 4046     		mov	r0, r8
 1146 00e0 4946     		mov	r1, r9
 1147 00e2 FFF7FEFF 		bl	__aeabi_dadd
 1148 00e6 0246     		mov	r2, r0
 1149 00e8 0B46     		mov	r3, r1
 1150 00ea 5046     		mov	r0, sl
 1151 00ec 5946     		mov	r1, fp
 1152 00ee FFF7FEFF 		bl	__aeabi_dadd
 1153 00f2 FFF7FEFF 		bl	sqrt
 1154 00f6 0022     		movs	r2, #0
 1155 00f8 8246     		mov	sl, r0
 1156 00fa 8B46     		mov	fp, r1
 1157 00fc 4046     		mov	r0, r8
 1158 00fe 4946     		mov	r1, r9
 1159 0100 9D4B     		ldr	r3, .L27+72
 1160 0102 FFF7FEFF 		bl	__aeabi_dadd
 1161 0106 5246     		mov	r2, sl
 1162 0108 5B46     		mov	r3, fp
 1163 010a FFF7FEFF 		bl	__aeabi_dadd
 1164 010e 88A3     		adr	r3, .L27
 1165 0110 D3E90023 		ldrd	r2, [r3]
 1166 0114 FFF7FEFF 		bl	pow
  51:math/pprz_geodetic_double.c ****   const double s1 = 1+s+1/s;
 1167              		.loc 1 51 0
 1168 0118 0022     		movs	r2, #0
 1169 011a 974B     		ldr	r3, .L27+72
  50:math/pprz_geodetic_double.c ****   const double s = pow( (1 + c + sqrt(c*c + 2*c)), 1./3.);
 1170              		.loc 1 50 0
 1171 011c 8046     		mov	r8, r0
 1172 011e 8946     		mov	r9, r1
  51:math/pprz_geodetic_double.c ****   const double s1 = 1+s+1/s;
 1173              		.loc 1 51 0
 1174 0120 FFF7FEFF 		bl	__aeabi_dadd
 1175 0124 4246     		mov	r2, r8
 1176 0126 8246     		mov	sl, r0
 1177 0128 8B46     		mov	fp, r1
 1178 012a 4B46     		mov	r3, r9
 1179 012c 0020     		movs	r0, #0
 1180 012e 9249     		ldr	r1, .L27+72
 1181 0130 FFF7FEFF 		bl	__aeabi_ddiv
 1182 0134 0246     		mov	r2, r0
 1183 0136 0B46     		mov	r3, r1
 1184 0138 5046     		mov	r0, sl
 1185 013a 5946     		mov	r1, fp
 1186 013c FFF7FEFF 		bl	__aeabi_dadd
  52:math/pprz_geodetic_double.c ****   const double P = F/(3*s1*s1*G*G);
 1187              		.loc 1 52 0
 1188 0140 0022     		movs	r2, #0
  51:math/pprz_geodetic_double.c ****   const double s1 = 1+s+1/s;
 1189              		.loc 1 51 0
 1190 0142 8046     		mov	r8, r0
 1191 0144 8946     		mov	r9, r1
  52:math/pprz_geodetic_double.c ****   const double P = F/(3*s1*s1*G*G);
 1192              		.loc 1 52 0
 1193 0146 8D4B     		ldr	r3, .L27+76
 1194 0148 FFF7FEFF 		bl	__aeabi_dmul
 1195 014c 4246     		mov	r2, r8
 1196 014e 4B46     		mov	r3, r9
 1197 0150 FFF7FEFF 		bl	__aeabi_dmul
 1198 0154 3246     		mov	r2, r6
 1199 0156 3B46     		mov	r3, r7
 1200 0158 FFF7FEFF 		bl	__aeabi_dmul
 1201 015c 3246     		mov	r2, r6
 1202 015e 3B46     		mov	r3, r7
 1203 0160 FFF7FEFF 		bl	__aeabi_dmul
 1204 0164 0246     		mov	r2, r0
 1205 0166 0B46     		mov	r3, r1
 1206 0168 DDE90201 		ldrd	r0, [sp, #8]
 1207 016c FFF7FEFF 		bl	__aeabi_ddiv
  53:math/pprz_geodetic_double.c ****   const double Q = sqrt(1+2*e2*e2*P);
 1208              		.loc 1 53 0
 1209 0170 71A3     		adr	r3, .L27+8
 1210 0172 D3E90023 		ldrd	r2, [r3]
  52:math/pprz_geodetic_double.c ****   const double P = F/(3*s1*s1*G*G);
 1211              		.loc 1 52 0
 1212 0176 0646     		mov	r6, r0
 1213 0178 0F46     		mov	r7, r1
  53:math/pprz_geodetic_double.c ****   const double Q = sqrt(1+2*e2*e2*P);
 1214              		.loc 1 53 0
 1215 017a FFF7FEFF 		bl	__aeabi_dmul
 1216 017e 0022     		movs	r2, #0
 1217 0180 7D4B     		ldr	r3, .L27+72
 1218 0182 FFF7FEFF 		bl	__aeabi_dadd
 1219 0186 FFF7FEFF 		bl	sqrt
  54:math/pprz_geodetic_double.c ****   const double ro = -(e2*P*r)/(1+Q) + sqrt((a*a/2)*(1+1/Q) - ((1-e2)*P*z2)/(Q*(1+Q)) - P*r2/2);
 1220              		.loc 1 54 0
 1221 018a 0022     		movs	r2, #0
 1222 018c 7A4B     		ldr	r3, .L27+72
  53:math/pprz_geodetic_double.c ****   const double Q = sqrt(1+2*e2*e2*P);
 1223              		.loc 1 53 0
 1224 018e 8046     		mov	r8, r0
 1225              	.LVL65:
 1226 0190 8946     		mov	r9, r1
 1227              	.LVL66:
  54:math/pprz_geodetic_double.c ****   const double ro = -(e2*P*r)/(1+Q) + sqrt((a*a/2)*(1+1/Q) - ((1-e2)*P*z2)/(Q*(1+Q)) - P*r2/2);
 1228              		.loc 1 54 0
 1229 0192 FFF7FEFF 		bl	__aeabi_dadd
 1230 0196 4246     		mov	r2, r8
 1231 0198 8246     		mov	sl, r0
 1232 019a 8B46     		mov	fp, r1
 1233 019c 4B46     		mov	r3, r9
 1234 019e 0020     		movs	r0, #0
 1235 01a0 7549     		ldr	r1, .L27+72
 1236 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 1237 01a6 0022     		movs	r2, #0
 1238 01a8 734B     		ldr	r3, .L27+72
 1239 01aa FFF7FEFF 		bl	__aeabi_dadd
 1240 01ae 64A3     		adr	r3, .L27+16
 1241 01b0 D3E90023 		ldrd	r2, [r3]
 1242 01b4 FFF7FEFF 		bl	__aeabi_dmul
 1243 01b8 63A3     		adr	r3, .L27+24
 1244 01ba D3E90023 		ldrd	r2, [r3]
 1245 01be CDE90201 		strd	r0, [sp, #8]
 1246 01c2 3046     		mov	r0, r6
 1247 01c4 3946     		mov	r1, r7
 1248 01c6 FFF7FEFF 		bl	__aeabi_dmul
 1249 01ca DDE90023 		ldrd	r2, [sp]
 1250 01ce FFF7FEFF 		bl	__aeabi_dmul
 1251 01d2 5246     		mov	r2, sl
 1252 01d4 CDE90A01 		strd	r0, [sp, #40]
 1253 01d8 5B46     		mov	r3, fp
 1254 01da 4046     		mov	r0, r8
 1255 01dc 4946     		mov	r1, r9
 1256 01de FFF7FEFF 		bl	__aeabi_dmul
 1257 01e2 0246     		mov	r2, r0
 1258 01e4 0B46     		mov	r3, r1
 1259 01e6 DDE90A01 		ldrd	r0, [sp, #40]
 1260 01ea FFF7FEFF 		bl	__aeabi_ddiv
 1261 01ee 0246     		mov	r2, r0
 1262 01f0 0B46     		mov	r3, r1
 1263 01f2 DDE90201 		ldrd	r0, [sp, #8]
 1264 01f6 FFF7FEFF 		bl	__aeabi_dadd
 1265 01fa DDE90623 		ldrd	r2, [sp, #24]
 1266 01fe 8046     		mov	r8, r0
 1267              	.LVL67:
 1268 0200 8946     		mov	r9, r1
 1269              	.LVL68:
 1270 0202 3046     		mov	r0, r6
 1271 0204 3946     		mov	r1, r7
 1272 0206 FFF7FEFF 		bl	__aeabi_dmul
 1273 020a 0022     		movs	r2, #0
 1274 020c 5C4B     		ldr	r3, .L27+80
 1275 020e FFF7FEFF 		bl	__aeabi_dmul
 1276 0212 0246     		mov	r2, r0
 1277 0214 0B46     		mov	r3, r1
 1278 0216 4046     		mov	r0, r8
 1279 0218 4946     		mov	r1, r9
 1280 021a FFF7FEFF 		bl	__aeabi_dadd
 1281 021e FFF7FEFF 		bl	sqrt
  55:math/pprz_geodetic_double.c ****   const double tmp = (r - e2*ro)*(r - e2*ro);
 1282              		.loc 1 55 0
 1283 0222 4BA3     		adr	r3, .L27+32
 1284 0224 D3E90023 		ldrd	r2, [r3]
  54:math/pprz_geodetic_double.c ****   const double ro = -(e2*P*r)/(1+Q) + sqrt((a*a/2)*(1+1/Q) - ((1-e2)*P*z2)/(Q*(1+Q)) - P*r2/2);
 1285              		.loc 1 54 0
 1286 0228 8046     		mov	r8, r0
 1287 022a 8946     		mov	r9, r1
  55:math/pprz_geodetic_double.c ****   const double tmp = (r - e2*ro)*(r - e2*ro);
 1288              		.loc 1 55 0
 1289 022c 3046     		mov	r0, r6
 1290 022e 3946     		mov	r1, r7
 1291 0230 FFF7FEFF 		bl	__aeabi_dmul
 1292 0234 DDE90423 		ldrd	r2, [sp, #16]
 1293 0238 FFF7FEFF 		bl	__aeabi_dmul
 1294 023c 5246     		mov	r2, sl
 1295 023e 5B46     		mov	r3, fp
 1296 0240 FFF7FEFF 		bl	__aeabi_ddiv
 1297 0244 4246     		mov	r2, r8
 1298 0246 4B46     		mov	r3, r9
 1299 0248 FFF7FEFF 		bl	__aeabi_dadd
 1300 024c 40A3     		adr	r3, .L27+32
 1301 024e D3E90023 		ldrd	r2, [r3]
 1302 0252 FFF7FEFF 		bl	__aeabi_dmul
 1303 0256 0246     		mov	r2, r0
 1304 0258 0B46     		mov	r3, r1
 1305 025a DDE90401 		ldrd	r0, [sp, #16]
 1306 025e FFF7FEFF 		bl	__aeabi_dadd
 1307 0262 0246     		mov	r2, r0
 1308 0264 0B46     		mov	r3, r1
 1309 0266 FFF7FEFF 		bl	__aeabi_dmul
  56:math/pprz_geodetic_double.c ****   const double U = sqrt( tmp + z2 );
 1310              		.loc 1 56 0
 1311 026a DDE90023 		ldrd	r2, [sp]
  55:math/pprz_geodetic_double.c ****   const double tmp = (r - e2*ro)*(r - e2*ro);
 1312              		.loc 1 55 0
 1313 026e 0646     		mov	r6, r0
 1314 0270 0F46     		mov	r7, r1
  56:math/pprz_geodetic_double.c ****   const double U = sqrt( tmp + z2 );
 1315              		.loc 1 56 0
 1316 0272 FFF7FEFF 		bl	__aeabi_dadd
 1317 0276 FFF7FEFF 		bl	sqrt
  57:math/pprz_geodetic_double.c ****   const double V = sqrt( tmp + (1-e2)*z2 );
 1318              		.loc 1 57 0
 1319 027a DDE90823 		ldrd	r2, [sp, #32]
  56:math/pprz_geodetic_double.c ****   const double U = sqrt( tmp + z2 );
 1320              		.loc 1 56 0
 1321 027e 8046     		mov	r8, r0
 1322              	.LVL69:
 1323 0280 8946     		mov	r9, r1
 1324              	.LVL70:
  57:math/pprz_geodetic_double.c ****   const double V = sqrt( tmp + (1-e2)*z2 );
 1325              		.loc 1 57 0
 1326 0282 3046     		mov	r0, r6
 1327 0284 3946     		mov	r1, r7
 1328 0286 FFF7FEFF 		bl	__aeabi_dadd
 1329 028a FFF7FEFF 		bl	sqrt
  60:math/pprz_geodetic_double.c ****   lla->alt = U*(1 - b2/(a*V));
 1330              		.loc 1 60 0
 1331 028e 32A3     		adr	r3, .L27+40
 1332 0290 D3E90023 		ldrd	r2, [r3]
  58:math/pprz_geodetic_double.c ****   const double zo = (b2*ecef->z)/(a*V);
 1333              		.loc 1 58 0
 1334 0294 D4E90467 		ldrd	r6, [r4, #16]
  57:math/pprz_geodetic_double.c ****   const double V = sqrt( tmp + (1-e2)*z2 );
 1335              		.loc 1 57 0
 1336 0298 8246     		mov	sl, r0
 1337              	.LVL71:
 1338 029a 8B46     		mov	fp, r1
 1339              	.LVL72:
  60:math/pprz_geodetic_double.c ****   lla->alt = U*(1 - b2/(a*V));
 1340              		.loc 1 60 0
 1341 029c FFF7FEFF 		bl	__aeabi_dmul
 1342 02a0 0246     		mov	r2, r0
 1343 02a2 0B46     		mov	r3, r1
 1344 02a4 2EA1     		adr	r1, .L27+48
 1345 02a6 D1E90001 		ldrd	r0, [r1]
 1346 02aa FFF7FEFF 		bl	__aeabi_ddiv
 1347 02ae 0022     		movs	r2, #0
 1348 02b0 314B     		ldr	r3, .L27+72
 1349 02b2 FFF7FEFF 		bl	__aeabi_dadd
 1350 02b6 0246     		mov	r2, r0
 1351 02b8 0B46     		mov	r3, r1
 1352 02ba 4046     		mov	r0, r8
 1353 02bc 4946     		mov	r1, r9
 1354 02be FFF7FEFF 		bl	__aeabi_dmul
  61:math/pprz_geodetic_double.c ****   lla->lat = atan((ecef->z + ep2*zo)/r);
 1355              		.loc 1 61 0
 1356 02c2 27A3     		adr	r3, .L27+48
 1357 02c4 D3E90023 		ldrd	r2, [r3]
  60:math/pprz_geodetic_double.c ****   lla->alt = U*(1 - b2/(a*V));
 1358              		.loc 1 60 0
 1359 02c8 C5E90401 		strd	r0, [r5, #16]
  61:math/pprz_geodetic_double.c ****   lla->lat = atan((ecef->z + ep2*zo)/r);
 1360              		.loc 1 61 0
 1361 02cc 3046     		mov	r0, r6
 1362 02ce 3946     		mov	r1, r7
 1363 02d0 FFF7FEFF 		bl	__aeabi_dmul
 1364 02d4 24A3     		adr	r3, .L27+56
 1365 02d6 D3E90023 		ldrd	r2, [r3]
 1366 02da 8046     		mov	r8, r0
 1367              	.LVL73:
 1368 02dc 8946     		mov	r9, r1
 1369              	.LVL74:
 1370 02de 5046     		mov	r0, sl
 1371 02e0 5946     		mov	r1, fp
 1372 02e2 FFF7FEFF 		bl	__aeabi_dmul
 1373 02e6 0246     		mov	r2, r0
 1374 02e8 0B46     		mov	r3, r1
 1375 02ea 4046     		mov	r0, r8
 1376 02ec 4946     		mov	r1, r9
 1377 02ee FFF7FEFF 		bl	__aeabi_ddiv
 1378 02f2 1FA3     		adr	r3, .L27+64
 1379 02f4 D3E90023 		ldrd	r2, [r3]
 1380 02f8 FFF7FEFF 		bl	__aeabi_dmul
 1381 02fc 0246     		mov	r2, r0
 1382 02fe 0B46     		mov	r3, r1
 1383 0300 3046     		mov	r0, r6
 1384 0302 3946     		mov	r1, r7
 1385 0304 FFF7FEFF 		bl	__aeabi_dadd
 1386 0308 DDE90423 		ldrd	r2, [sp, #16]
 1387 030c FFF7FEFF 		bl	__aeabi_ddiv
 1388 0310 FFF7FEFF 		bl	atan
 1389 0314 C5E90201 		strd	r0, [r5, #8]
  62:math/pprz_geodetic_double.c ****   lla->lon = atan2(ecef->y,ecef->x);
 1390              		.loc 1 62 0
 1391 0318 D4E90201 		ldrd	r0, [r4, #8]
 1392 031c D4E90023 		ldrd	r2, [r4]
 1393 0320 FFF7FEFF 		bl	atan2
 1394 0324 C5E90001 		strd	r0, [r5]
  64:math/pprz_geodetic_double.c **** }
 1395              		.loc 1 64 0
 1396 0328 0DB0     		add	sp, sp, #52
 1397 032a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1398              	.L28:
 1399 032e 00BF     		.align	3
 1400              	.L27:
 1401 0330 55555555 		.word	1431655765
 1402 0334 5555D53F 		.word	1070945621
 1403 0338 F27A402C 		.word	742423282
 1404 033c EE7E173F 		.word	1058504430
 1405 0340 80B82F4C 		.word	1278195840
 1406 0344 D97FB242 		.word	1118994393
 1407 0348 D6021CDE 		.word	-568589610
 1408 034c 28C9EFBF 		.word	-1074804440
 1409 0350 F094FEF1 		.word	-234973968
 1410 0354 906B7BBF 		.word	-1082430576
 1411 0358 00000040 		.word	1073741824
 1412 035c A65458C1 		.word	-1051175770
 1413 0360 B98AEB2E 		.word	787188409
 1414 0364 2560C242 		.word	1120034853
 1415 0368 00000040 		.word	1073741824
 1416 036c A6545841 		.word	1096307878
 1417 0370 D2DC97E1 		.word	-510141230
 1418 0374 DF9A7B3F 		.word	1065065183
 1419 0378 0000F03F 		.word	1072693248
 1420 037c 00000840 		.word	1074266112
 1421 0380 0000E0BF 		.word	-1075838976
 1422 0384 187A2DBF 		.word	-1087538664
 1423 0388 3E021F43 		.word	1126105662
 1424 038c D6021CDE 		.word	-568589610
 1425 0390 28C9EF3F 		.word	1072679208
 1426 0394 6801A78D 		.word	-1918434968
 1427 0398 8A2ADB41 		.word	1104882314
 1428 039c F27A402C 		.word	742423282
 1429 03a0 EE7E073F 		.word	1057455854
 1430              		.cfi_endproc
 1431              	.LFE3:
 1433 03a4 AFF30080 		.section	.text.ltp_def_from_ecef_d,"ax",%progbits
 1434              		.align	1
 1435              		.global	ltp_def_from_ecef_d
 1436              		.thumb
 1437              		.thumb_func
 1439              	ltp_def_from_ecef_d:
 1440              	.LFB2:
   7:math/pprz_geodetic_double.c **** void ltp_def_from_ecef_d(struct LtpDef_d* def, struct EcefCoor_d* ecef) {
 1441              		.loc 1 7 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 16
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 1445              	.LVL75:
 1446 0000 2DE9FF47 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 1447              	.LCFI19:
 1448              		.cfi_def_cfa_offset 48
 1449              	.LVL76:
  10:math/pprz_geodetic_double.c ****   VECT3_COPY(def->ecef, *ecef);
 1450              		.loc 1 10 0
 1451 0004 D1E90023 		ldrd	r2, [r1]
 1452              		.cfi_offset 14, -4
 1453              		.cfi_offset 10, -8
 1454              		.cfi_offset 9, -12
 1455              		.cfi_offset 8, -16
 1456              		.cfi_offset 7, -20
 1457              		.cfi_offset 6, -24
 1458              		.cfi_offset 5, -28
 1459              		.cfi_offset 4, -32
 1460              		.cfi_offset 3, -36
 1461              		.cfi_offset 2, -40
 1462              		.cfi_offset 1, -44
 1463              		.cfi_offset 0, -48
 1464              	.LVL77:
   7:math/pprz_geodetic_double.c **** void ltp_def_from_ecef_d(struct LtpDef_d* def, struct EcefCoor_d* ecef) {
 1465              		.loc 1 7 0
 1466 0008 0446     		mov	r4, r0
 1467              	.LVL78:
  10:math/pprz_geodetic_double.c ****   VECT3_COPY(def->ecef, *ecef);
 1468              		.loc 1 10 0
 1469 000a C0E90023 		strd	r2, [r0]
 1470 000e D1E90223 		ldrd	r2, [r1, #8]
 1471 0012 C0E90223 		strd	r2, [r0, #8]
 1472 0016 D1E90423 		ldrd	r2, [r1, #16]
  12:math/pprz_geodetic_double.c ****   lla_of_ecef_d(&def->lla, &def->ecef);
 1473              		.loc 1 12 0
 1474 001a 2146     		mov	r1, r4
 1475              	.LVL79:
  10:math/pprz_geodetic_double.c ****   VECT3_COPY(def->ecef, *ecef);
 1476              		.loc 1 10 0
 1477 001c C0E90423 		strd	r2, [r0, #16]
  12:math/pprz_geodetic_double.c ****   lla_of_ecef_d(&def->lla, &def->ecef);
 1478              		.loc 1 12 0
 1479 0020 1830     		adds	r0, r0, #24
 1480              	.LVL80:
 1481 0022 FFF7FEFF 		bl	lla_of_ecef_d
  14:math/pprz_geodetic_double.c ****   const double sin_lat = sin(def->lla.lat);
 1482              		.loc 1 14 0
 1483 0026 D4E90867 		ldrd	r6, [r4, #32]
 1484 002a 3046     		mov	r0, r6
 1485 002c 3946     		mov	r1, r7
 1486 002e FFF7FEFF 		bl	sin
 1487 0032 0546     		mov	r5, r0
 1488              	.LVL81:
 1489 0034 8A46     		mov	sl, r1
 1490              	.LVL82:
  15:math/pprz_geodetic_double.c ****   const double cos_lat = cos(def->lla.lat);
 1491              		.loc 1 15 0
 1492 0036 3046     		mov	r0, r6
 1493 0038 3946     		mov	r1, r7
 1494 003a FFF7FEFF 		bl	cos
  16:math/pprz_geodetic_double.c ****   const double sin_lon = sin(def->lla.lon);
 1495              		.loc 1 16 0
 1496 003e D4E90689 		ldrd	r8, [r4, #24]
  15:math/pprz_geodetic_double.c ****   const double cos_lat = cos(def->lla.lat);
 1497              		.loc 1 15 0
 1498 0042 CDE90201 		strd	r0, [sp, #8]
  16:math/pprz_geodetic_double.c ****   const double sin_lon = sin(def->lla.lon);
 1499              		.loc 1 16 0
 1500 0046 4046     		mov	r0, r8
 1501 0048 4946     		mov	r1, r9
 1502 004a FFF7FEFF 		bl	sin
 1503 004e 0746     		mov	r7, r0
 1504              	.LVL83:
 1505 0050 0E46     		mov	r6, r1
 1506              	.LVL84:
  17:math/pprz_geodetic_double.c ****   const double cos_lon = cos(def->lla.lon);
 1507              		.loc 1 17 0
 1508 0052 4046     		mov	r0, r8
 1509 0054 4946     		mov	r1, r9
 1510 0056 FFF7FEFF 		bl	cos
  18:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[0] = -sin_lon;
 1511              		.loc 1 18 0
 1512 005a 06F10043 		add	r3, r6, #-2147483648
  19:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[1] =  cos_lon;
 1513              		.loc 1 19 0
 1514 005e 0246     		mov	r2, r0
  18:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[0] = -sin_lon;
 1515              		.loc 1 18 0
 1516 0060 6363     		str	r3, [r4, #52]
  19:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[1] =  cos_lon;
 1517              		.loc 1 19 0
 1518 0062 0B46     		mov	r3, r1
  17:math/pprz_geodetic_double.c ****   const double cos_lon = cos(def->lla.lon);
 1519              		.loc 1 17 0
 1520 0064 CDE90001 		strd	r0, [sp]
  19:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[1] =  cos_lon;
 1521              		.loc 1 19 0
 1522 0068 C4E90E23 		strd	r2, [r4, #56]
  21:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat*cos_lon;
 1523              		.loc 1 21 0
 1524 006c 0AF10048 		add	r8, sl, #-2147483648
  20:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[2] =  0.;
 1525              		.loc 1 20 0
 1526 0070 0022     		movs	r2, #0
 1527 0072 0023     		movs	r3, #0
 1528 0074 C4E91023 		strd	r2, [r4, #64]
  21:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat*cos_lon;
 1529              		.loc 1 21 0
 1530 0078 DDE90023 		ldrd	r2, [sp]
  18:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[0] = -sin_lon;
 1531              		.loc 1 18 0
 1532 007c 2763     		str	r7, [r4, #48]
  21:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat*cos_lon;
 1533              		.loc 1 21 0
 1534 007e 2846     		mov	r0, r5
 1535 0080 4146     		mov	r1, r8
 1536 0082 FFF7FEFF 		bl	__aeabi_dmul
  22:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat*sin_lon;
 1537              		.loc 1 22 0
 1538 0086 3A46     		mov	r2, r7
  21:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[3] = -sin_lat*cos_lon;
 1539              		.loc 1 21 0
 1540 0088 C4E91201 		strd	r0, [r4, #72]
  22:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat*sin_lon;
 1541              		.loc 1 22 0
 1542 008c 3346     		mov	r3, r6
 1543 008e 2846     		mov	r0, r5
 1544 0090 4146     		mov	r1, r8
 1545 0092 FFF7FEFF 		bl	__aeabi_dmul
  23:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[5] =  cos_lat;
 1546              		.loc 1 23 0
 1547 0096 DDE90223 		ldrd	r2, [sp, #8]
  22:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[4] = -sin_lat*sin_lon;
 1548              		.loc 1 22 0
 1549 009a C4E91401 		strd	r0, [r4, #80]
  23:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[5] =  cos_lat;
 1550              		.loc 1 23 0
 1551 009e C4E91623 		strd	r2, [r4, #88]
  24:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[6] =  cos_lat*cos_lon;
 1552              		.loc 1 24 0
 1553 00a2 1046     		mov	r0, r2
 1554 00a4 1946     		mov	r1, r3
 1555 00a6 DDE90023 		ldrd	r2, [sp]
 1556 00aa FFF7FEFF 		bl	__aeabi_dmul
  25:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat*sin_lon;
 1557              		.loc 1 25 0
 1558 00ae 3A46     		mov	r2, r7
  24:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[6] =  cos_lat*cos_lon;
 1559              		.loc 1 24 0
 1560 00b0 C4E91801 		strd	r0, [r4, #96]
  25:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat*sin_lon;
 1561              		.loc 1 25 0
 1562 00b4 DDE90201 		ldrd	r0, [sp, #8]
 1563 00b8 3346     		mov	r3, r6
 1564 00ba FFF7FEFF 		bl	__aeabi_dmul
  26:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[8] =  sin_lat;
 1565              		.loc 1 26 0
 1566 00be 2A46     		mov	r2, r5
 1567 00c0 5346     		mov	r3, sl
  25:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[7] =  cos_lat*sin_lon;
 1568              		.loc 1 25 0
 1569 00c2 C4E91A01 		strd	r0, [r4, #104]
  26:math/pprz_geodetic_double.c ****   def->ltp_of_ecef.m[8] =  sin_lat;
 1570              		.loc 1 26 0
 1571 00c6 C4E91C23 		strd	r2, [r4, #112]
  28:math/pprz_geodetic_double.c **** }
 1572              		.loc 1 28 0
 1573 00ca BDE8FF87 		pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 1574              		.cfi_endproc
 1575              	.LFE2:
 1577              		.global	__aeabi_i2d
 1578              		.global	__aeabi_dcmpgt
 1579              		.section	.text.lla_of_utm_d,"ax",%progbits
 1580              		.align	1
 1581              		.global	lla_of_utm_d
 1582              		.thumb
 1583              		.thumb_func
 1585              	lla_of_utm_d:
 1586              	.LFB17:
 139:math/pprz_geodetic_double.c **** 
 140:math/pprz_geodetic_double.c **** 
 141:math/pprz_geodetic_double.c **** #include "math/pprz_geodetic_utm.h"
 142:math/pprz_geodetic_double.c **** 
 143:math/pprz_geodetic_double.c **** static inline double isometric_latitude_d(double phi, double e) {
 144:math/pprz_geodetic_double.c ****   return log (tan (M_PI_4 + phi / 2.0)) - e / 2.0 * log((1.0 + e * sin(phi)) / (1.0 - e * sin(phi))
 145:math/pprz_geodetic_double.c **** }
 146:math/pprz_geodetic_double.c **** 
 147:math/pprz_geodetic_double.c **** static inline double isometric_latitude_fast_d(double phi) {
 148:math/pprz_geodetic_double.c ****   return log (tan (M_PI_4 + phi / 2.0));
 149:math/pprz_geodetic_double.c **** }
 150:math/pprz_geodetic_double.c **** 
 151:math/pprz_geodetic_double.c **** static inline double inverse_isometric_latitude_d(double lat, double e, double epsilon) {
 152:math/pprz_geodetic_double.c ****   double exp_l = exp(lat);
 153:math/pprz_geodetic_double.c ****   double phi0 = 2 * atan(exp_l) - M_PI_2;
 154:math/pprz_geodetic_double.c ****   double phi_;
 155:math/pprz_geodetic_double.c ****   uint8_t max_iter = 3; /* To be sure to return */
 156:math/pprz_geodetic_double.c **** 
 157:math/pprz_geodetic_double.c ****   do {
 158:math/pprz_geodetic_double.c ****     phi_ = phi0;
 159:math/pprz_geodetic_double.c ****     double sin_phi = e * sin(phi_);
 160:math/pprz_geodetic_double.c ****     phi0 = 2 * atan (pow((1 + sin_phi) / (1. - sin_phi), e/2.) * exp_l) - M_PI_2;
 161:math/pprz_geodetic_double.c ****     max_iter--;
 162:math/pprz_geodetic_double.c ****   }
 163:math/pprz_geodetic_double.c ****   while (max_iter && fabs(phi_ - phi0) > epsilon);
 164:math/pprz_geodetic_double.c **** 
 165:math/pprz_geodetic_double.c ****   return phi0;
 166:math/pprz_geodetic_double.c **** }
 167:math/pprz_geodetic_double.c **** 
 168:math/pprz_geodetic_double.c **** #define CI(v) {					\
 169:math/pprz_geodetic_double.c ****     double tmp = v.x;				\
 170:math/pprz_geodetic_double.c ****     v.x = -v.y;					\
 171:math/pprz_geodetic_double.c ****     v.y = tmp;					\
 172:math/pprz_geodetic_double.c ****   }
 173:math/pprz_geodetic_double.c **** 
 174:math/pprz_geodetic_double.c **** #define CExp(v) {				\
 175:math/pprz_geodetic_double.c ****     double e = exp(v.x);			\
 176:math/pprz_geodetic_double.c ****     v.x = e*cosf(v.y);				\
 177:math/pprz_geodetic_double.c ****     v.y = e*sinf(v.y);				\
 178:math/pprz_geodetic_double.c ****   }
 179:math/pprz_geodetic_double.c **** 
 180:math/pprz_geodetic_double.c **** #define CSin(v) {				\
 181:math/pprz_geodetic_double.c ****     CI(v);					\
 182:math/pprz_geodetic_double.c ****     struct DoubleVect2 vstar = {-v.x, -v.y};	\
 183:math/pprz_geodetic_double.c ****     CExp(v);					\
 184:math/pprz_geodetic_double.c ****     CExp(vstar);				\
 185:math/pprz_geodetic_double.c ****     VECT2_SUB(v, vstar);			\
 186:math/pprz_geodetic_double.c ****     VECT2_SMUL(v, v, -0.5);			\
 187:math/pprz_geodetic_double.c ****     CI(v);					\
 188:math/pprz_geodetic_double.c ****   }
 189:math/pprz_geodetic_double.c **** 
 190:math/pprz_geodetic_double.c **** void lla_of_utm_d(struct LlaCoor_d* lla, struct UtmCoor_d* utm) {
 1587              		.loc 1 190 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 40
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 1591              	.LVL85:
 1592 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1593              	.LCFI20:
 1594              		.cfi_def_cfa_offset 36
 191:math/pprz_geodetic_double.c **** 
 192:math/pprz_geodetic_double.c ****   struct DoubleVect2 v = {utm->north - DELTA_NORTH, utm->east - DELTA_EAST};
 193:math/pprz_geodetic_double.c ****   double scale = 1 / N / serie_coeff_proj_mercator[0];
 194:math/pprz_geodetic_double.c ****   VECT2_SMUL(v, v, scale);
 1595              		.loc 1 194 0
 1596 0004 B9A3     		adr	r3, .L38+68
 1597 0006 D3E90023 		ldrd	r2, [r3]
 190:math/pprz_geodetic_double.c **** void lla_of_utm_d(struct LlaCoor_d* lla, struct UtmCoor_d* utm) {
 1598              		.loc 1 190 0
 1599 000a 8BB0     		sub	sp, sp, #44
 1600              	.LCFI21:
 1601              		.cfi_def_cfa_offset 80
 190:math/pprz_geodetic_double.c **** void lla_of_utm_d(struct LlaCoor_d* lla, struct UtmCoor_d* utm) {
 1602              		.loc 1 190 0
 1603 000c 0C46     		mov	r4, r1
 1604              		.cfi_offset 14, -4
 1605              		.cfi_offset 11, -8
 1606              		.cfi_offset 10, -12
 1607              		.cfi_offset 9, -16
 1608              		.cfi_offset 8, -20
 1609              		.cfi_offset 7, -24
 1610              		.cfi_offset 6, -28
 1611              		.cfi_offset 5, -32
 1612              		.cfi_offset 4, -36
 1613 000e 0546     		mov	r5, r0
 1614              		.loc 1 194 0
 1615 0010 D1E90001 		ldrd	r0, [r1]
 1616              	.LVL86:
 1617 0014 FFF7FEFF 		bl	__aeabi_dmul
 1618              	.LVL87:
 1619 0018 B6A3     		adr	r3, .L38+76
 1620 001a D3E90023 		ldrd	r2, [r3]
 1621 001e CDE90001 		strd	r0, [sp]
 1622 0022 D4E90201 		ldrd	r0, [r4, #8]
 1623 0026 FFF7FEFF 		bl	__aeabi_dsub
 1624 002a B0A3     		adr	r3, .L38+68
 1625 002c D3E90023 		ldrd	r2, [r3]
 1626 0030 FFF7FEFF 		bl	__aeabi_dmul
 1627 0034 CDE90201 		strd	r0, [sp, #8]
 195:math/pprz_geodetic_double.c **** 
 196:math/pprz_geodetic_double.c ****   // first order taylor serie of something ?
 197:math/pprz_geodetic_double.c ****   struct DoubleVect2 v1;
 198:math/pprz_geodetic_double.c ****   VECT2_SMUL(v1, v, 2.);
 1628              		.loc 1 198 0
 1629 0038 DDE90001 		ldrd	r0, [sp]
 1630 003c 0246     		mov	r2, r0
 1631 003e 0B46     		mov	r3, r1
 1632 0040 FFF7FEFF 		bl	__aeabi_dadd
 1633 0044 8046     		mov	r8, r0
 1634 0046 0E46     		mov	r6, r1
 1635 0048 DDE90201 		ldrd	r0, [sp, #8]
 1636 004c 0246     		mov	r2, r0
 1637 004e 0B46     		mov	r3, r1
 1638 0050 FFF7FEFF 		bl	__aeabi_dadd
 1639 0054 8A46     		mov	sl, r1
 1640              	.LBB14:
 1641              	.LBB15:
 199:math/pprz_geodetic_double.c ****   CSin(v1);
 1642              		.loc 1 199 0
 1643 0056 01F10041 		add	r1, r1, #-2147483648
 1644              	.LBE15:
 1645              	.LBE14:
 198:math/pprz_geodetic_double.c ****   VECT2_SMUL(v1, v, 2.);
 1646              		.loc 1 198 0
 1647 005a 8146     		mov	r9, r0
 1648              	.LBB20:
 1649              	.LBB16:
 1650              		.loc 1 199 0
 1651 005c FFF7FEFF 		bl	exp
 1652 0060 CDE90601 		strd	r0, [sp, #24]
 1653 0064 3146     		mov	r1, r6
 1654 0066 4046     		mov	r0, r8
 1655 0068 FFF7FEFF 		bl	__aeabi_d2f
 1656 006c 0746     		mov	r7, r0
 1657 006e FFF7FEFF 		bl	cosf
 1658 0072 8346     		mov	fp, r0
 1659 0074 3846     		mov	r0, r7
 1660 0076 FFF7FEFF 		bl	sinf
 1661              	.LBE16:
 1662              	.LBB17:
 1663 007a 5146     		mov	r1, sl
 1664              	.LBE17:
 1665              	.LBB18:
 1666 007c 0746     		mov	r7, r0
 1667              	.LBE18:
 1668              	.LBB19:
 1669 007e 4846     		mov	r0, r9
 1670 0080 FFF7FEFF 		bl	exp
 1671 0084 CDE90401 		strd	r0, [sp, #16]
 1672 0088 06F10041 		add	r1, r6, #-2147483648
 1673 008c 4046     		mov	r0, r8
 1674 008e FFF7FEFF 		bl	__aeabi_d2f
 1675 0092 8046     		mov	r8, r0
 1676 0094 FFF7FEFF 		bl	cosf
 1677 0098 0646     		mov	r6, r0
 1678 009a 4046     		mov	r0, r8
 1679 009c FFF7FEFF 		bl	sinf
 1680 00a0 8046     		mov	r8, r0
 1681              	.LBE19:
 1682              	.LBE20:
 200:math/pprz_geodetic_double.c ****   VECT2_SMUL(v1, v1, serie_coeff_proj_mercator[1]);
 201:math/pprz_geodetic_double.c ****   VECT2_SUB(v, v1);
 1683              		.loc 1 201 0
 1684 00a2 3846     		mov	r0, r7
 1685 00a4 FFF7FEFF 		bl	__aeabi_f2d
 1686 00a8 0246     		mov	r2, r0
 1687 00aa 0B46     		mov	r3, r1
 1688 00ac DDE90601 		ldrd	r0, [sp, #24]
 1689 00b0 FFF7FEFF 		bl	__aeabi_dmul
 1690 00b4 CDE90801 		strd	r0, [sp, #32]
 1691 00b8 4046     		mov	r0, r8
 1692 00ba FFF7FEFF 		bl	__aeabi_f2d
 1693 00be 0246     		mov	r2, r0
 1694 00c0 0B46     		mov	r3, r1
 1695 00c2 DDE90401 		ldrd	r0, [sp, #16]
 1696 00c6 FFF7FEFF 		bl	__aeabi_dmul
 1697 00ca 0246     		mov	r2, r0
 1698 00cc 0B46     		mov	r3, r1
 1699 00ce DDE90801 		ldrd	r0, [sp, #32]
 1700 00d2 FFF7FEFF 		bl	__aeabi_dsub
 1701 00d6 0022     		movs	r2, #0
 1702 00d8 814B     		ldr	r3, .L38+56
 1703 00da FFF7FEFF 		bl	__aeabi_dmul
 1704 00de 01F10043 		add	r3, r1, #-2147483648
 1705 00e2 1946     		mov	r1, r3
 1706 00e4 70A3     		adr	r3, .L38
 1707 00e6 D3E90023 		ldrd	r2, [r3]
 1708 00ea FFF7FEFF 		bl	__aeabi_dmul
 1709 00ee 0246     		mov	r2, r0
 1710 00f0 0B46     		mov	r3, r1
 1711 00f2 DDE90001 		ldrd	r0, [sp]
 1712 00f6 FFF7FEFF 		bl	__aeabi_dsub
 1713 00fa 8046     		mov	r8, r0
 1714 00fc 5846     		mov	r0, fp
 1715 00fe 8946     		mov	r9, r1
 1716 0100 FFF7FEFF 		bl	__aeabi_f2d
 1717 0104 0246     		mov	r2, r0
 1718 0106 0B46     		mov	r3, r1
 1719 0108 DDE90601 		ldrd	r0, [sp, #24]
 1720 010c FFF7FEFF 		bl	__aeabi_dmul
 1721 0110 8246     		mov	sl, r0
 1722 0112 3046     		mov	r0, r6
 1723 0114 8B46     		mov	fp, r1
 1724 0116 FFF7FEFF 		bl	__aeabi_f2d
 1725 011a 0246     		mov	r2, r0
 1726 011c 0B46     		mov	r3, r1
 1727 011e DDE90401 		ldrd	r0, [sp, #16]
 1728 0122 FFF7FEFF 		bl	__aeabi_dmul
 1729 0126 0246     		mov	r2, r0
 1730 0128 0B46     		mov	r3, r1
 1731 012a 5046     		mov	r0, sl
 1732 012c 5946     		mov	r1, fp
 1733 012e FFF7FEFF 		bl	__aeabi_dsub
 1734 0132 0022     		movs	r2, #0
 1735 0134 6A4B     		ldr	r3, .L38+56
 1736 0136 FFF7FEFF 		bl	__aeabi_dmul
 1737 013a 5BA3     		adr	r3, .L38
 1738 013c D3E90023 		ldrd	r2, [r3]
 1739 0140 FFF7FEFF 		bl	__aeabi_dmul
 1740 0144 0246     		mov	r2, r0
 1741 0146 0B46     		mov	r3, r1
 1742 0148 DDE90201 		ldrd	r0, [sp, #8]
 1743 014c FFF7FEFF 		bl	__aeabi_dsub
 1744 0150 0646     		mov	r6, r0
 202:math/pprz_geodetic_double.c **** 
 203:math/pprz_geodetic_double.c ****   double lambda_c = LambdaOfUtmZone(utm->zone);
 1745              		.loc 1 203 0
 1746 0152 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 1747 0154 0623     		movs	r3, #6
 1748 0156 0138     		subs	r0, r0, #1
 1749 0158 5843     		muls	r0, r3, r0
 1750 015a B138     		subs	r0, r0, #177
 201:math/pprz_geodetic_double.c ****   VECT2_SUB(v, v1);
 1751              		.loc 1 201 0
 1752 015c 0F46     		mov	r7, r1
 1753              		.loc 1 203 0
 1754 015e FFF7FEFF 		bl	__aeabi_i2d
 1755 0162 53A3     		adr	r3, .L38+8
 1756 0164 D3E90023 		ldrd	r2, [r3]
 1757 0168 FFF7FEFF 		bl	__aeabi_dmul
 1758 016c CDE90001 		strd	r0, [sp]
 204:math/pprz_geodetic_double.c ****   lla->lon = lambda_c + atan(sinh(v.y) / cos(v.x));
 1759              		.loc 1 204 0
 1760 0170 3046     		mov	r0, r6
 1761 0172 3946     		mov	r1, r7
 1762 0174 FFF7FEFF 		bl	sinh
 1763 0178 8246     		mov	sl, r0
 1764 017a 8B46     		mov	fp, r1
 1765 017c 4046     		mov	r0, r8
 1766 017e 4946     		mov	r1, r9
 1767 0180 FFF7FEFF 		bl	cos
 1768 0184 0246     		mov	r2, r0
 1769 0186 0B46     		mov	r3, r1
 1770 0188 5046     		mov	r0, sl
 1771 018a 5946     		mov	r1, fp
 1772 018c FFF7FEFF 		bl	__aeabi_ddiv
 1773 0190 FFF7FEFF 		bl	atan
 1774 0194 0246     		mov	r2, r0
 1775 0196 0B46     		mov	r3, r1
 1776 0198 DDE90001 		ldrd	r0, [sp]
 1777 019c FFF7FEFF 		bl	__aeabi_dadd
 1778 01a0 C5E90001 		strd	r0, [r5]
 205:math/pprz_geodetic_double.c ****   double phi = asin (sin(v.x) / cosh(v.y));
 1779              		.loc 1 205 0
 1780 01a4 4046     		mov	r0, r8
 1781 01a6 4946     		mov	r1, r9
 1782 01a8 FFF7FEFF 		bl	sin
 1783 01ac 8046     		mov	r8, r0
 1784 01ae 8946     		mov	r9, r1
 1785 01b0 3046     		mov	r0, r6
 1786 01b2 3946     		mov	r1, r7
 1787 01b4 FFF7FEFF 		bl	cosh
 1788 01b8 0246     		mov	r2, r0
 1789 01ba 0B46     		mov	r3, r1
 1790 01bc 4046     		mov	r0, r8
 1791 01be 4946     		mov	r1, r9
 1792 01c0 FFF7FEFF 		bl	__aeabi_ddiv
 1793 01c4 FFF7FEFF 		bl	asin
 1794              	.LBB21:
 1795              	.LBB22:
 148:math/pprz_geodetic_double.c ****   return log (tan (M_PI_4 + phi / 2.0));
 1796              		.loc 1 148 0
 1797 01c8 0022     		movs	r2, #0
 1798 01ca 464B     		ldr	r3, .L38+60
 1799 01cc FFF7FEFF 		bl	__aeabi_dmul
 1800 01d0 39A3     		adr	r3, .L38+16
 1801 01d2 D3E90023 		ldrd	r2, [r3]
 1802 01d6 FFF7FEFF 		bl	__aeabi_dadd
 1803 01da FFF7FEFF 		bl	tan
 1804 01de FFF7FEFF 		bl	log
 1805              	.LBE22:
 1806              	.LBE21:
 1807              	.LBB23:
 1808              	.LBB24:
 152:math/pprz_geodetic_double.c ****   double exp_l = exp(lat);
 1809              		.loc 1 152 0
 1810 01e2 FFF7FEFF 		bl	exp
 1811 01e6 CDE90001 		strd	r0, [sp]
 153:math/pprz_geodetic_double.c ****   double phi0 = 2 * atan(exp_l) - M_PI_2;
 1812              		.loc 1 153 0
 1813 01ea FFF7FEFF 		bl	atan
 1814 01ee 0246     		mov	r2, r0
 1815 01f0 0B46     		mov	r3, r1
 1816 01f2 FFF7FEFF 		bl	__aeabi_dadd
 1817 01f6 32A3     		adr	r3, .L38+24
 1818 01f8 D3E90023 		ldrd	r2, [r3]
 1819 01fc FFF7FEFF 		bl	__aeabi_dsub
 1820 0200 0326     		movs	r6, #3
 1821              	.LVL88:
 1822 0202 8046     		mov	r8, r0
 1823              	.LVL89:
 1824 0204 8946     		mov	r9, r1
 1825              	.LVL90:
 1826              	.L34:
 1827              	.LBB25:
 159:math/pprz_geodetic_double.c ****     double sin_phi = e * sin(phi_);
 1828              		.loc 1 159 0
 1829 0206 4046     		mov	r0, r8
 1830 0208 4946     		mov	r1, r9
 1831 020a FFF7FEFF 		bl	sin
 1832 020e 2EA3     		adr	r3, .L38+32
 1833 0210 D3E90023 		ldrd	r2, [r3]
 1834 0214 FFF7FEFF 		bl	__aeabi_dmul
 160:math/pprz_geodetic_double.c ****     phi0 = 2 * atan (pow((1 + sin_phi) / (1. - sin_phi), e/2.) * exp_l) - M_PI_2;
 1835              		.loc 1 160 0
 1836 0218 0022     		movs	r2, #0
 1837 021a 334B     		ldr	r3, .L38+64
 159:math/pprz_geodetic_double.c ****     double sin_phi = e * sin(phi_);
 1838              		.loc 1 159 0
 1839 021c 8246     		mov	sl, r0
 1840 021e 8B46     		mov	fp, r1
 160:math/pprz_geodetic_double.c ****     phi0 = 2 * atan (pow((1 + sin_phi) / (1. - sin_phi), e/2.) * exp_l) - M_PI_2;
 1841              		.loc 1 160 0
 1842 0220 FFF7FEFF 		bl	__aeabi_dadd
 1843 0224 5246     		mov	r2, sl
 1844 0226 CDE90201 		strd	r0, [sp, #8]
 1845 022a 5B46     		mov	r3, fp
 1846 022c 0020     		movs	r0, #0
 1847 022e 2E49     		ldr	r1, .L38+64
 1848 0230 FFF7FEFF 		bl	__aeabi_dsub
 1849 0234 0246     		mov	r2, r0
 1850 0236 0B46     		mov	r3, r1
 1851 0238 DDE90201 		ldrd	r0, [sp, #8]
 1852 023c FFF7FEFF 		bl	__aeabi_ddiv
 1853 0240 23A3     		adr	r3, .L38+40
 1854 0242 D3E90023 		ldrd	r2, [r3]
 1855 0246 FFF7FEFF 		bl	pow
 1856 024a DDE90023 		ldrd	r2, [sp]
 1857 024e FFF7FEFF 		bl	__aeabi_dmul
 1858 0252 FFF7FEFF 		bl	atan
 1859 0256 0246     		mov	r2, r0
 1860 0258 0B46     		mov	r3, r1
 1861 025a FFF7FEFF 		bl	__aeabi_dadd
 1862 025e 18A3     		adr	r3, .L38+24
 1863 0260 D3E90023 		ldrd	r2, [r3]
 1864 0264 FFF7FEFF 		bl	__aeabi_dsub
 161:math/pprz_geodetic_double.c ****     max_iter--;
 1865              		.loc 1 161 0
 1866 0268 013E     		subs	r6, r6, #1
 1867              	.LVL91:
 1868 026a F6B2     		uxtb	r6, r6
 1869              	.LVL92:
 160:math/pprz_geodetic_double.c ****     phi0 = 2 * atan (pow((1 + sin_phi) / (1. - sin_phi), e/2.) * exp_l) - M_PI_2;
 1870              		.loc 1 160 0
 1871 026c 8246     		mov	sl, r0
 1872 026e 8B46     		mov	fp, r1
 1873              	.LBE25:
 163:math/pprz_geodetic_double.c ****   while (max_iter && fabs(phi_ - phi0) > epsilon);
 1874              		.loc 1 163 0
 1875 0270 8EB1     		cbz	r6, .L32
 1876 0272 5246     		mov	r2, sl
 1877 0274 5B46     		mov	r3, fp
 1878 0276 4046     		mov	r0, r8
 1879 0278 4946     		mov	r1, r9
 1880 027a FFF7FEFF 		bl	__aeabi_dsub
 1881 027e 21F00043 		bic	r3, r1, #-2147483648
 1882 0282 1946     		mov	r1, r3
 1883 0284 14A3     		adr	r3, .L38+48
 1884 0286 D3E90023 		ldrd	r2, [r3]
 1885 028a FFF7FEFF 		bl	__aeabi_dcmpgt
 1886 028e 10B1     		cbz	r0, .L32
 1887 0290 D046     		mov	r8, sl
 1888              	.LVL93:
 1889 0292 D946     		mov	r9, fp
 1890              	.LVL94:
 1891 0294 B7E7     		b	.L34
 1892              	.L32:
 1893              	.LBE24:
 1894              	.LBE23:
 206:math/pprz_geodetic_double.c ****   double il = isometric_latitude_fast_d(phi);
 207:math/pprz_geodetic_double.c ****   lla->lat = inverse_isometric_latitude_d(il, E, 1e-8);
 1895              		.loc 1 207 0
 1896 0296 C5E902AB 		strd	sl, [r5, #8]
 208:math/pprz_geodetic_double.c **** 
 209:math/pprz_geodetic_double.c ****   // copy alt above reference ellipsoid
 210:math/pprz_geodetic_double.c ****   lla->alt = utm->alt;
 1897              		.loc 1 210 0
 1898 029a D4E90423 		ldrd	r2, [r4, #16]
 1899 029e C5E90423 		strd	r2, [r5, #16]
 211:math/pprz_geodetic_double.c **** 
 212:math/pprz_geodetic_double.c **** }
 1900              		.loc 1 212 0
 1901 02a2 0BB0     		add	sp, sp, #44
 1902 02a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1903              	.L39:
 1904              		.align	3
 1905              	.L38:
 1906 02a8 000000C0 		.word	-1073741824
 1907 02ac A0674B3F 		.word	1061906336
 1908 02b0 399D52A2 		.word	-1571644103
 1909 02b4 46DF913F 		.word	1066524486
 1910 02b8 182D4454 		.word	1413754136
 1911 02bc FB21E93F 		.word	1072243195
 1912 02c0 182D4454 		.word	1413754136
 1913 02c4 FB21F93F 		.word	1073291771
 1914 02c8 37B2C93D 		.word	1036628535
 1915 02cc 1AF2B43F 		.word	1068823066
 1916 02d0 37B2C93D 		.word	1036628535
 1917 02d4 1AF2A43F 		.word	1067774490
 1918 02d8 3A8C30E2 		.word	-500134854
 1919 02dc 8E79453E 		.word	1044740494
 1920 02e0 0000E0BF 		.word	-1075838976
 1921 02e4 0000E03F 		.word	1071644672
 1922 02e8 0000F03F 		.word	1072693248
 1923 02ec 3E72EF54 		.word	1424978494
 1924 02f0 5016853E 		.word	1048909392
 1925 02f4 00000000 		.word	0
 1926 02f8 80841E41 		.word	1092519040
 1927              		.cfi_endproc
 1928              	.LFE17:
 1930 02fc AFF30080 		.text
 1931              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 pprz_geodetic_double.c
     /tmp/ccW2FgtS.s:27     .text.enu_of_ecef_point_d:00000000 $t
     /tmp/ccW2FgtS.s:32     .text.enu_of_ecef_point_d:00000000 enu_of_ecef_point_d
     /tmp/ccW2FgtS.s:169    .text.ned_of_ecef_point_d:00000000 $t
     /tmp/ccW2FgtS.s:174    .text.ned_of_ecef_point_d:00000000 ned_of_ecef_point_d
     /tmp/ccW2FgtS.s:213    .text.enu_of_ecef_vect_d:00000000 $t
     /tmp/ccW2FgtS.s:218    .text.enu_of_ecef_vect_d:00000000 enu_of_ecef_vect_d
     /tmp/ccW2FgtS.s:340    .text.ned_of_ecef_vect_d:00000000 $t
     /tmp/ccW2FgtS.s:345    .text.ned_of_ecef_vect_d:00000000 ned_of_ecef_vect_d
     /tmp/ccW2FgtS.s:384    .text.ecef_of_enu_point_d:00000000 $t
     /tmp/ccW2FgtS.s:389    .text.ecef_of_enu_point_d:00000000 ecef_of_enu_point_d
     /tmp/ccW2FgtS.s:531    .text.ecef_of_ned_point_d:00000000 $t
     /tmp/ccW2FgtS.s:536    .text.ecef_of_ned_point_d:00000000 ecef_of_ned_point_d
     /tmp/ccW2FgtS.s:578    .text.ecef_of_enu_vect_d:00000000 $t
     /tmp/ccW2FgtS.s:583    .text.ecef_of_enu_vect_d:00000000 ecef_of_enu_vect_d
     /tmp/ccW2FgtS.s:705    .text.ecef_of_ned_vect_d:00000000 $t
     /tmp/ccW2FgtS.s:710    .text.ecef_of_ned_vect_d:00000000 ecef_of_ned_vect_d
     /tmp/ccW2FgtS.s:752    .text.gc_of_gd_lat_d:00000000 $t
     /tmp/ccW2FgtS.s:757    .text.gc_of_gd_lat_d:00000000 gc_of_gd_lat_d
     /tmp/ccW2FgtS.s:868    .text.gc_of_gd_lat_d:000000c0 $d
     /tmp/ccW2FgtS.s:879    .text.ecef_of_lla_d:00000000 $t
     /tmp/ccW2FgtS.s:884    .text.ecef_of_lla_d:00000000 ecef_of_lla_d
     /tmp/ccW2FgtS.s:1012   .text.ecef_of_lla_d:000000e0 $d
     /tmp/ccW2FgtS.s:1023   .text.lla_of_ecef_d:00000000 $t
     /tmp/ccW2FgtS.s:1028   .text.lla_of_ecef_d:00000000 lla_of_ecef_d
     /tmp/ccW2FgtS.s:1401   .text.lla_of_ecef_d:00000330 $d
     /tmp/ccW2FgtS.s:1434   .text.ltp_def_from_ecef_d:00000000 $t
     /tmp/ccW2FgtS.s:1439   .text.ltp_def_from_ecef_d:00000000 ltp_def_from_ecef_d
     /tmp/ccW2FgtS.s:1580   .text.lla_of_utm_d:00000000 $t
     /tmp/ccW2FgtS.s:1585   .text.lla_of_utm_d:00000000 lla_of_utm_d
     /tmp/ccW2FgtS.s:1906   .text.lla_of_utm_d:000002a8 $d
                     .debug_frame:00000010 $d
     /tmp/ccW2FgtS.s:1022   .text.ecef_of_lla_d:000000fc $t
     /tmp/ccW2FgtS.s:1433   .text.lla_of_ecef_d:000003a4 $t
     /tmp/ccW2FgtS.s:1930   .text.lla_of_utm_d:000002fc $t

UNDEFINED SYMBOLS
__aeabi_dsub
__aeabi_dmul
__aeabi_dadd
tan
atan
sin
cos
atan2
__aeabi_d2f
__aeabi_f2d
__aeabi_ddiv
sqrtf
sqrt
pow
__aeabi_i2d
__aeabi_dcmpgt
exp
cosf
sinf
sinh
cosh
asin
log
